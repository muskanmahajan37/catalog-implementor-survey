{
  "swagger": "2.0",
  "info": {
    "description": "Rest API for accessing the APOLLO catalog",
    "version": "v2.0",
    "title": "APOLLO Catalog and Data Management API",
    "termsOfService": "https://www.hexagongeospatial.com/apps/terms",
    "contact": {
      "name": "https://www.hexagongeospatial.com/"
    },
    "license": {
      "name": "2017 Intergraph Corporation. All rights reserved. Hexagon Geospatial is part of Intergraph Corporation",
      "url": "https://www.hexagongeospatial.com/apps/terms"
    }
  },
  "basePath": "/erdas-apollo",
  "tags": [
    {
      "name": "Entire Catalog",
      "description": "All catalog items"
    },
    {
      "name": "Aggregates",
      "description": "Aggregates"
    },
    {
      "name": "Contacts",
      "description": "Contacts"
    },
    {
      "name": "Generic",
      "description": "Generic business data/documents"
    },
    {
      "name": "Images",
      "description": "Image datasets"
    },
    {
      "name": "Point Clouds",
      "description": "Point cloud datasets"
    },
    {
      "name": "Processes",
      "description": "Spatial processes"
    },
    {
      "name": "Services",
      "description": "OGC Services"
    },
    {
      "name": "Vectors",
      "description": "Vector datasets"
    },
    {
      "name": "Videos",
      "description": "Video datasets"
    },
    {
      "name": "Clip Zip Ship",
      "description": "Clips data from catalog"
    },
    {
      "name": "Crawl",
      "description": "Crawl data into the catalog"
    },
    {
      "name": "Delete",
      "description": "Delete items from the catalog"
    },
    {
      "name": "Dropbox",
      "description": "Manage dropboxes"
    },
    {
      "name": "Jobs",
      "description": "Get and manage jobs created by other APIs"
    },
    {
      "name": "Move",
      "description": "Move catalog items"
    },
    {
      "name": "Pyramids",
      "description": "Manage catalog item pyramids"
    },
    {
      "name": "Thumbnails",
      "description": "Manage catalog item thumbnails"
    },
    {
      "name": "Update Metadata",
      "description": "Update catalog item ISO metadata"
    },
    {
      "name": "Context Services",
      "description": "Manage context(WMC) services"
    },
    {
      "name": "Vector Services",
      "description": "Manage vector services"
    }
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/content/catalog/search": {
      "post": {
        "summary": "Advanced catalog search.",
        "parameters": [
          {
            "$ref": "#/parameters/advancedSearchCriteriaPostPayloadParam"
          }
        ],
        "tags": [
          "Entire Catalog"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/QueryResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/content/catalog/items": {
      "get": {
        "summary": "Get all catalog items.",
        "description": "Catalog items can be filtered by various query parameters. By default a brief summary of each catalog item is returned.\n",
        "parameters": [
          {
            "$ref": "#/parameters/profileParamBrief"
          },
          {
            "$ref": "#/parameters/keywordsParam"
          },
          {
            "$ref": "#/parameters/orderbyParam"
          },
          {
            "$ref": "#/parameters/startParam"
          },
          {
            "$ref": "#/parameters/maxresultsParam"
          },
          {
            "$ref": "#/parameters/classesParam"
          },
          {
            "$ref": "#/parameters/intersectParam"
          }
        ],
        "tags": [
          "Entire Catalog"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/QueryResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/content/catalog/items/{ID}": {
      "get": {
        "summary": "Get a catalog item",
        "produces": [
          "application/json"
        ],
        "description": "Returns a specific catalog item. By default the full catalog item is returned.\n",
        "parameters": [
          {
            "$ref": "#/parameters/idParam"
          },
          {
            "$ref": "#/parameters/profileParamFull"
          }
        ],
        "tags": [
          "Entire Catalog"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/QueryResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "404": {
            "description": "No results in the catalog",
            "schema": {
              "$ref": "#/definitions/NoResultError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a catalog item.",
        "description": "Deleting a non-aggregate will delete that item only. Deleting an aggregate will perform a cascading delete and any contained aggregates and items will also be deleted.  DELETE /content/catalog/items/{itemId} will redirect here.",
        "operationId": "startDeleteItemJob",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/idParam"
          }
        ],
        "tags": [
          "Entire Catalog"
        ],
        "responses": {
          "202": {
            "description": "Request accepted for processing.",
            "schema": {
              "$ref": "#/definitions/JobBrief"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ForbiddenRequestError"
            }
          },
          "404": {
            "description": "No results in the catalog.",
            "schema": {
              "$ref": "#/definitions/NoResultError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update a catalog item.",
        "description": "Updates property values on a specific catalog item.",
        "parameters": [
          {
            "$ref": "#/parameters/idParam"
          },
          {
            "$ref": "#/parameters/catalogAttributePatchPayloadParam"
          }
        ],
        "tags": [
          "Entire Catalog"
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No results in the catalog.",
            "schema": {
              "$ref": "#/definitions/NoResultError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/content/catalog/items/{ID}/attachment/{attachmentName}": {
      "get": {
        "summary": "Get an attachment.",
        "description": "Returns a list of attachments for the specified catalog item.",
        "produces": [
          "image/jpeg",
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/idParam"
          },
          {
            "$ref": "#/parameters/attachmentNameParam"
          }
        ],
        "tags": [
          "Entire Catalog"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "file"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "404": {
            "description": "No results in the catalog.",
            "schema": {
              "$ref": "#/definitions/NoResultError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Add an attachment.",
        "description": "Adds an attachment reference to the catalog item. The attachment is represented by path to a file, name for attachment, and the mimeType of the file.",
        "produces": [
          "image/jpeg",
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/idParam"
          },
          {
            "$ref": "#/parameters/attachmentNameParam"
          },
          {
            "$ref": "#/parameters/attachmentPostPayload"
          }
        ],
        "tags": [
          "Entire Catalog"
        ],
        "responses": {
          "201": {
            "description": "Success, with the URL of the created attachment in the response Location header, if the property was successfully created."
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "404": {
            "description": "No results in the catalog.",
            "schema": {
              "$ref": "#/definitions/NoResultError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Entire Catalog"
        ],
        "summary": "Delete an attachment.",
        "consumes": [
          "application/json"
        ],
        "description": "Deletes an attachment reference from a specific catalog item.",
        "parameters": [
          {
            "$ref": "#/parameters/idParam"
          },
          {
            "$ref": "#/parameters/attachmentNameParam"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the attachment from catalog item."
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "404": {
            "description": "No results in the catalog.",
            "schema": {
              "$ref": "#/definitions/NoResultError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/content/catalog/items/{ID}/{propertyName}": {
      "get": {
        "summary": "Get a property value.",
        "description": "Returns the value of the property for a specific catalog item.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/idParam"
          },
          {
            "$ref": "#/parameters/propertyNameParam"
          }
        ],
        "tags": [
          "Entire Catalog"
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "404": {
            "description": "No results in the catalog.",
            "schema": {
              "$ref": "#/definitions/NoResultError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Add or update a property.",
        "description": "Create a new property, or update an existing property, of a specific catalog item.",
        "consumes": [
          "application/x-www-form-urlencoded",
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/idParam"
          },
          {
            "$ref": "#/parameters/propertyNameParam"
          },
          {
            "$ref": "#/parameters/propertyPostTypeQueryParam"
          },
          {
            "$ref": "#/parameters/propertyPostValueQueryParam"
          },
          {
            "$ref": "#/parameters/propertyPostRenameQueryParam"
          },
          {
            "$ref": "#/parameters/propertyPostPayloadParam"
          }
        ],
        "tags": [
          "Entire Catalog"
        ],
        "responses": {
          "201": {
            "description": "Success, with the URL of the created property in the response Location header, if the property was successfully created."
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "404": {
            "description": "No results in the catalog.",
            "schema": {
              "$ref": "#/definitions/NoResultError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Entire Catalog"
        ],
        "summary": "Delete a property.",
        "description": "Deletes a property by name from a specific catalog item .",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/idParam"
          },
          {
            "$ref": "#/parameters/propertyNameParam"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the catalog item."
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "404": {
            "description": "No results in the catalog.",
            "schema": {
              "$ref": "#/definitions/NoResultError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/content/catalog/items/{ID}/classifyingConcepts": {
      "get": {
        "summary": "Get a concept type item.",
        "description": "Returns a concept that classifies a specific catalog item.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/idParam"
          },
          {
            "$ref": "#/parameters/profileParamBrief"
          },
          {
            "$ref": "#/parameters/keywordsParam"
          },
          {
            "$ref": "#/parameters/orderbyParam"
          },
          {
            "$ref": "#/parameters/startParam"
          },
          {
            "$ref": "#/parameters/maxresultsParam"
          }
        ],
        "tags": [
          "Entire Catalog"
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "404": {
            "description": "No results in the catalog.",
            "schema": {
              "$ref": "#/definitions/NoResultError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Add a concept type item.",
        "description": "Adds a new concept type that classifies a catalog item.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/idParam"
          }
        ],
        "tags": [
          "Entire Catalog"
        ],
        "responses": {
          "201": {
            "description": "Success if concept was successfully created."
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "404": {
            "description": "No results in the catalog.",
            "schema": {
              "$ref": "#/definitions/NoResultError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a concept type item.",
        "description": "Deletes a concept type that classifies a catalog item.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/idParam"
          }
        ],
        "tags": [
          "Entire Catalog"
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the catalog item."
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "404": {
            "description": "No results in the catalog.",
            "schema": {
              "$ref": "#/definitions/NoResultError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/content/catalog/concepts/{ID}/classifiedObjects": {
      "get": {
        "summary": "Get all classification object type items.",
        "description": "Returns list of objects classified by a specific concept item.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/idParam"
          },
          {
            "$ref": "#/parameters/profileParamBrief"
          },
          {
            "$ref": "#/parameters/keywordsParam"
          },
          {
            "$ref": "#/parameters/orderbyParam"
          },
          {
            "$ref": "#/parameters/startParam"
          },
          {
            "$ref": "#/parameters/maxresultsParam"
          }
        ],
        "tags": [
          "Entire Catalog"
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "404": {
            "description": "No results in the catalog.",
            "schema": {
              "$ref": "#/definitions/NoResultError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Add classification object type item.",
        "description": "Adds a new object to classify a given concept type item.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/idParam"
          }
        ],
        "tags": [
          "Entire Catalog"
        ],
        "responses": {
          "201": {
            "description": "Success if item was successfully created."
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "404": {
            "description": "No results in the catalog.",
            "schema": {
              "$ref": "#/definitions/NoResultError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a classification object type item.",
        "description": "Deletes an object classified by a given concept item.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/idParam"
          }
        ],
        "tags": [
          "Entire Catalog"
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the catalog item."
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "404": {
            "description": "No results in the catalog.",
            "schema": {
              "$ref": "#/definitions/NoResultError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/content/catalog/items/{ID}/rights": {
      "get": {
        "summary": "Get rights for catalog item.",
        "description": "Gets rights information for a specific catalog item.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/idParam"
          }
        ],
        "tags": [
          "Entire Catalog"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Rights"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "404": {
            "description": "No results in the catalog.",
            "schema": {
              "$ref": "#/definitions/NoResultError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "Add or update rights for catalog item.",
        "description": "Creates or modifies the existing the rights for a specific catalog item.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/idParam"
          },
          {
            "$ref": "#/parameters/rightsPutPayloadParam"
          }
        ],
        "tags": [
          "Entire Catalog"
        ],
        "responses": {
          "204": {
            "description": "Successfully updated."
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ForbiddenRequestError"
            }
          },
          "404": {
            "description": "No results in the catalog.",
            "schema": {
              "$ref": "#/definitions/NoResultError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/content/catalog/items/{ID}/rights/currentuser": {
      "get": {
        "summary": "Get current user rights.",
        "description": "Gets a summary of rights for the current user for a specific catalog item.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/idParam"
          }
        ],
        "tags": [
          "Entire Catalog"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CurrentUserRightsSummary"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ForbiddenRequestError"
            }
          },
          "404": {
            "description": "No results in the catalog.",
            "schema": {
              "$ref": "#/definitions/NoResultError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/content/catalog/items/{ID}/rights/{principalName}": {
      "delete": {
        "summary": "Delete rights by principal name.",
        "description": "Deletes a principal's rights for a catalog item.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/idParam"
          },
          {
            "$ref": "#parameters/principalNameParam"
          }
        ],
        "tags": [
          "Entire Catalog"
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ForbiddenRequestError"
            }
          },
          "404": {
            "description": "No results in the catalog.",
            "schema": {
              "$ref": "#/definitions/NoResultError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/content/catalog/aggregates": {
      "get": {
        "summary": "Get all aggregates.",
        "description": "Returns list of aggregate catalog items. Catalog aggregates can be filtered using the various query parameters. By default a brief summary for each folder is returned.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/profileParamBrief"
          },
          {
            "$ref": "#/parameters/keywordsParam"
          },
          {
            "$ref": "#/parameters/orderbyParam"
          },
          {
            "$ref": "#/parameters/startParam"
          },
          {
            "$ref": "#/parameters/maxresultsParam"
          },
          {
            "$ref": "#/parameters/intersectParam"
          }
        ],
        "tags": [
          "Aggregates"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/QueryResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Add an aggregate.",
        "description": "Adds an aggregate catalog item with minimum properties. Returns new aggregate id in Location header.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Creates an aggregate with minimum properties.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AggregateParams"
            }
          }
        ],
        "tags": [
          "Aggregates"
        ],
        "responses": {
          "201": {
            "description": "Request accepted for processing."
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "422": {
            "description": "Invalid parent specified.",
            "schema": {
              "$ref": "#/definitions/UnprocessableEntityError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/content/catalog/aggregates/{ID}": {
      "get": {
        "summary": "Get an aggregate.",
        "description": "Returns a specific aggregate catalog item. By default, this the full aggregate definition is returned.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/idParam"
          },
          {
            "$ref": "#/parameters/profileParamFull"
          }
        ],
        "tags": [
          "Aggregates"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/QueryResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "404": {
            "description": "No results in the catalog.",
            "schema": {
              "$ref": "#/definitions/NoResultError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update an aggregate.",
        "description": "Updates property values on a specific aggregate catalog item.",
        "parameters": [
          {
            "$ref": "#/parameters/idParam"
          },
          {
            "$ref": "#/parameters/catalogAttributePatchPayloadParam"
          }
        ],
        "tags": [
          "Aggregates"
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "404": {
            "description": "No results in the catalog.",
            "schema": {
              "$ref": "#/definitions/NoResultError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/content/catalog/datasets/images": {
      "get": {
        "summary": "Get all image datasets.",
        "description": "Returns all image dataset catalog items. Catalog items can by filtered using various query parameters. By default, a brief summary for each catalog item is returned.\n",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/profileParamBrief"
          },
          {
            "$ref": "#/parameters/keywordsParam"
          },
          {
            "$ref": "#/parameters/orderbyParam"
          },
          {
            "$ref": "#/parameters/startParam"
          },
          {
            "$ref": "#/parameters/maxresultsParam"
          },
          {
            "$ref": "#/parameters/intersectParam"
          }
        ],
        "tags": [
          "Images"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/QueryResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Add an image dataset.",
        "description": "Adds a image dataset catalog item.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/catalogItemPostPayload"
          }
        ],
        "tags": [
          "Images"
        ],
        "responses": {
          "201": {
            "description": "Success, with the URL of the created resource in the response Location header, if the resource was successfully created."
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "422": {
            "description": "Invalid parent specified.",
            "schema": {
              "$ref": "#/definitions/UnprocessableEntityError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/content/catalog/datasets/images/{ID}": {
      "get": {
        "summary": "Get an image dataset.",
        "description": "Returns an image dataset by specific catalog item. By default, the full catalog item is returned.\n",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/idParam"
          },
          {
            "$ref": "#/parameters/profileParamFull"
          }
        ],
        "tags": [
          "Images"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/QueryResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "404": {
            "description": "No results in the catalog.",
            "schema": {
              "$ref": "#/definitions/NoResultError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Images"
        ],
        "summary": "Update an image dataset.",
        "description": "Updates property values on a specific catalog image dataset.",
        "parameters": [
          {
            "$ref": "#/parameters/idParam"
          },
          {
            "$ref": "#/parameters/catalogAttributePatchPayloadParam"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "404": {
            "description": "No results in the catalog.",
            "schema": {
              "$ref": "#/definitions/NoResultError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/content/catalog/datasets/vectors": {
      "get": {
        "summary": "Get all vector feature datasets.",
        "description": "Returns a list of all vector feature dataset catalog items. Catalog items can be filtered using various query parameters. By default, a brief summary of the catalog items is returned.\n",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/profileParamBrief"
          },
          {
            "$ref": "#/parameters/keywordsParam"
          },
          {
            "$ref": "#/parameters/orderbyParam"
          },
          {
            "$ref": "#/parameters/startParam"
          },
          {
            "$ref": "#/parameters/maxresultsParam"
          },
          {
            "$ref": "#/parameters/intersectParam"
          }
        ],
        "tags": [
          "Vectors"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/QueryResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Add a vector feature dataset.",
        "description": "Adds a vector dataset catalog item.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/catalogItemPostPayload"
          }
        ],
        "tags": [
          "Vectors"
        ],
        "responses": {
          "201": {
            "description": "Success, with the URL of the created resource in the response Location header, if the resource was successfully created."
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "422": {
            "description": "Invalid parent specified.",
            "schema": {
              "$ref": "#/definitions/UnprocessableEntityError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/content/catalog/datasets/vectors/{ID}": {
      "get": {
        "summary": "Get a vector feature dataset.",
        "description": "Gets a specific vector feature dataset catalog item. By default, the full catalog item is returned.\n",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/idParam"
          },
          {
            "$ref": "#/parameters/profileParamFull"
          }
        ],
        "tags": [
          "Vectors"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/QueryResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "404": {
            "description": "No results in the catalog.",
            "schema": {
              "$ref": "#/definitions/NoResultError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update a vector feature dataset.",
        "description": "Update property values on a specific vector feature dataset.",
        "parameters": [
          {
            "$ref": "#/parameters/idParam"
          },
          {
            "$ref": "#/parameters/catalogAttributePatchPayloadParam"
          }
        ],
        "tags": [
          "Vectors"
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "404": {
            "description": "No results in the catalog.",
            "schema": {
              "$ref": "#/definitions/NoResultError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/content/catalog/datasets/pointclouds": {
      "get": {
        "summary": "Get all point cloud datasets.",
        "description": "Returns list of all point cloud dataset catalog items. Catalog items can be filtered using the various query parameters. By default, a brief summary of each catalog item is returned.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/profileParamBrief"
          },
          {
            "$ref": "#/parameters/keywordsParam"
          },
          {
            "$ref": "#/parameters/orderbyParam"
          },
          {
            "$ref": "#/parameters/startParam"
          },
          {
            "$ref": "#/parameters/maxresultsParam"
          },
          {
            "$ref": "#/parameters/intersectParam"
          }
        ],
        "tags": [
          "Point Clouds"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/QueryResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Add a point cloud dataset.",
        "description": "Adds a new point cloud dataset catalog item.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/catalogItemPostPayload"
          }
        ],
        "tags": [
          "Point Clouds"
        ],
        "responses": {
          "201": {
            "description": "Success, with the URL of the created resource in the response Location header, if the resource was successfully created."
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "422": {
            "description": "Invalid parent specified.",
            "schema": {
              "$ref": "#/definitions/UnprocessableEntityError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/content/catalog/datasets/pointclouds/{ID}": {
      "get": {
        "summary": "Get a point cloud dataset.",
        "description": "Returns a specific point cloud dataset catalog item. By default, the full catalog item is returned.\n",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/idParam"
          },
          {
            "$ref": "#/parameters/profileParamFull"
          }
        ],
        "tags": [
          "Point Clouds"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/QueryResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "404": {
            "description": "No results in the catalog.",
            "schema": {
              "$ref": "#/definitions/NoResultError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update a point cloud dataset.",
        "description": "Update property values on a specific point cloud dataset.",
        "parameters": [
          {
            "$ref": "#/parameters/idParam"
          },
          {
            "$ref": "#/parameters/catalogAttributePatchPayloadParam"
          }
        ],
        "tags": [
          "Point Clouds"
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "404": {
            "description": "No results in the catalog.",
            "schema": {
              "$ref": "#/definitions/NoResultError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/content/catalog/datasets/generic": {
      "get": {
        "summary": "Get all business datasets.",
        "description": "Returns list of all business dataset catalog items. Catalog items can be filtered using various query parameters. By default, a brief summary of each catalog item is returned.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/profileParamBrief"
          },
          {
            "$ref": "#/parameters/keywordsParam"
          },
          {
            "$ref": "#/parameters/orderbyParam"
          },
          {
            "$ref": "#/parameters/startParam"
          },
          {
            "$ref": "#/parameters/maxresultsParam"
          },
          {
            "$ref": "#/parameters/intersectParam"
          }
        ],
        "tags": [
          "Generic"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/QueryResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Add a business dataset.",
        "description": "Adds a new business dataset catalog item",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/catalogItemPostPayload"
          }
        ],
        "tags": [
          "Generic"
        ],
        "responses": {
          "201": {
            "description": "Success, with the URL of the created resource in the response Location header, if the resource was successfully created."
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "422": {
            "description": "Invalid parent specified.",
            "schema": {
              "$ref": "#/definitions/UnprocessableEntityError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/content/catalog/datasets/generic/{ID}": {
      "get": {
        "summary": "Get a business dataset.",
        "description": "Returns a specific business dataset catalog item. By default, the full catalog item is returned.\n",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/idParam"
          },
          {
            "$ref": "#/parameters/profileParamFull"
          }
        ],
        "tags": [
          "Generic"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/QueryResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "404": {
            "description": "No results in the catalog.",
            "schema": {
              "$ref": "#/definitions/NoResultError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update a business dataset.",
        "description": "Update property values on a specific business dataset catalog item.",
        "parameters": [
          {
            "$ref": "#/parameters/idParam"
          },
          {
            "$ref": "#/parameters/catalogAttributePatchPayloadParam"
          }
        ],
        "tags": [
          "Generic"
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "404": {
            "description": "No results in the catalog.",
            "schema": {
              "$ref": "#/definitions/NoResultError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/content/catalog/datasets/videos": {
      "get": {
        "summary": "Get all video datasets.",
        "description": "Returns list of all video dataset catalog items. Catalog items can be filtered using various query parameters. By default, a brief summary of each catalog item is returned.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/profileParamBrief"
          },
          {
            "$ref": "#/parameters/keywordsParam"
          },
          {
            "$ref": "#/parameters/orderbyParam"
          },
          {
            "$ref": "#/parameters/startParam"
          },
          {
            "$ref": "#/parameters/maxresultsParam"
          }
        ],
        "tags": [
          "Videos"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/QueryResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Add a video dataset.",
        "description": "Adds a new video dataset catalog item.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/catalogItemPostPayload"
          }
        ],
        "tags": [
          "Videos"
        ],
        "responses": {
          "201": {
            "description": "Success, with the URL of the created resource in the response Location header, if the resource was successfully created."
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "422": {
            "description": "Invalid parent specified.",
            "schema": {
              "$ref": "#/definitions/UnprocessableEntityError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/content/catalog/datasets/videos/{ID}": {
      "get": {
        "summary": "Get a video dataset.",
        "description": "Returns a specific video dataset catalog item. By default, the full catalog item is returned.\n",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/idParam"
          },
          {
            "$ref": "#/parameters/profileParamFull"
          }
        ],
        "tags": [
          "Videos"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/QueryResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "404": {
            "description": "No results in the catalog.",
            "schema": {
              "$ref": "#/definitions/NoResultError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Update a video dataset.",
        "description": "Update property values on a specific video dataset catalog item.",
        "parameters": [
          {
            "$ref": "#/parameters/idParam"
          },
          {
            "$ref": "#/parameters/catalogAttributePatchPayloadParam"
          }
        ],
        "tags": [
          "Videos"
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "404": {
            "description": "No results in the catalog.",
            "schema": {
              "$ref": "#/definitions/NoResultError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/clipZipShip": {
      "post": {
        "summary": "Clip image and provide access",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "description": "Creates job to clip data from catalog, package clipped data in zip file, and email download enabled link",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Clip Zip Ship Parameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClipZipShipParametersDefinition"
            }
          }
        ],
        "tags": [
          "Clip Zip Ship"
        ],
        "responses": {
          "202": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JobBrief"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ForbiddenRequestError"
            }
          },
          "422": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/InvalidRequestError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/crawl": {
      "post": {
        "summary": "Create a crawl job",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "description": "Creates job to find recognized data types on file system or in database and add to the APOLLO catalog",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Crawl job Parameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CrawlJobParametersDefinition"
            }
          }
        ],
        "tags": [
          "Crawl"
        ],
        "responses": {
          "202": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JobBrief"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ForbiddenRequestError"
            }
          },
          "404": {
            "description": "No results in the catalog",
            "schema": {
              "$ref": "#/definitions/NoResultError"
            }
          },
          "422": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/InvalidRequestError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/dropbox": {
      "post": {
        "summary": "Creates a dropbox configuration",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "description": "Creates a dropbox folder for monitoring and dynamically adds files to the APOLLO catalog",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Dropbox input parameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DropBoxParametersDefinition"
            }
          }
        ],
        "tags": [
          "Dropbox"
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ForbiddenRequestError"
            }
          },
          "404": {
            "description": "No results in the catalog",
            "schema": {
              "$ref": "#/definitions/NoResultError"
            }
          },
          "422": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/InvalidRequestError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/dropbox/{ID}": {
      "delete": {
        "summary": "Delete a dropbox configuration",
        "description": "Removes monitoring from a dropbox folder and deletes the associated configuration files",
        "parameters": [
          {
            "$ref": "#/parameters/idParam"
          }
        ],
        "tags": [
          "Dropbox"
        ],
        "responses": {
          "204": {
            "description": "Request successful - no content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ForbiddenRequestError"
            }
          },
          "404": {
            "description": "No results in the catalog",
            "schema": {
              "$ref": "#/definitions/NoResultError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/delete": {
      "post": {
        "summary": "Delete multiple aggregates or catalog items",
        "description": "Create a job that will delete one or more aggregate or catalog items. Deleting a non-aggregate will delete that item only. Deleting an aggregate will perform a cascading delete and any contained aggregates and items will also be deleted",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "operationId": "startDeleteItemsJob",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "List of catalog item identifier(s)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteJobParameters"
            }
          }
        ],
        "tags": [
          "Delete"
        ],
        "responses": {
          "202": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JobBrief"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ForbiddenRequestError"
            }
          },
          "404": {
            "description": "No results in the catalog",
            "schema": {
              "$ref": "#/definitions/NoResultError"
            }
          },
          "422": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/InvalidRequestError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/updateMetadata": {
      "post": {
        "summary": "Update catalog item ISO metadata",
        "description": "Create a job that will update single or bulk metadata items from the APOLLO catalog attachment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "List of catalog item identifier(s)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MetadataUpdateJobParameters"
            }
          }
        ],
        "tags": [
          "Update Metadata"
        ],
        "responses": {
          "202": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JobBrief"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "404": {
            "description": "No results in the catalog",
            "schema": {
              "$ref": "#/definitions/NoResultError"
            }
          },
          "422": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/InvalidRequestError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/move": {
      "post": {
        "summary": "Move catalog items",
        "description": "Create a job that will move catalog items to a different folder and the restore folders operation is called on the modified folders after the move is complete.",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "List of catalog item identifier(s) and new parent folder id",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MoveJobParameters"
            }
          }
        ],
        "tags": [
          "Move"
        ],
        "responses": {
          "202": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JobBrief"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ForbiddenRequestError"
            }
          },
          "404": {
            "description": "No results in the catalog",
            "schema": {
              "$ref": "#/definitions/NoResultError"
            }
          },
          "422": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/InvalidRequestError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/jobs": {
      "get": {
        "summary": "Get job ids of all jobs",
        "description": "Returns list of all current running job ids",
        "operationId": "getJobs",
        "parameters": [],
        "tags": [
          "Jobs"
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/JobBrief"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "404": {
            "description": "No results in the catalog",
            "schema": {
              "$ref": "#/definitions/NoResultError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/jobs/{jobId}": {
      "get": {
        "summary": "Get status for a job",
        "description": "Returns status for the specific job",
        "operationId": "getJob",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "Job identifier",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Jobs"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/JobBrief"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "404": {
            "description": "No results in the catalog",
            "schema": {
              "$ref": "#/definitions/NoResultError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a job",
        "description": "Deletes a current running job by id",
        "operationId": "deleteJob",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "Job identifier",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Jobs"
        ],
        "responses": {
          "204": {
            "description": "Request successful - no content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ForbiddenRequestError"
            }
          },
          "404": {
            "description": "No results in the catalog",
            "schema": {
              "$ref": "#/definitions/NoResultError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/jobs/{jobId}/cancel": {
      "put": {
        "summary": "Cancel a job",
        "description": "Cancels a current running job by id",
        "operationId": "cancelJob",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "Job identifier",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Jobs"
        ],
        "responses": {
          "201": {
            "description": "Request successful - no content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ForbiddenRequestError"
            }
          },
          "404": {
            "description": "No results in the catalog",
            "schema": {
              "$ref": "#/definitions/NoResultError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pyramids": {
      "post": {
        "summary": "Generate a pyramid",
        "description": "Creates a job that will generate a pyramid file. The specified catalog item will be updated with pyramid information. Multiple catalog item ids may be specified.",
        "operationId": "startGeneratePyramidJobs",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "List of catalog identifier(s)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PyramidJobParameters"
            }
          }
        ],
        "tags": [
          "Pyramids"
        ],
        "responses": {
          "202": {
            "description": "Request accepted",
            "schema": {
              "$ref": "#/definitions/JobBrief"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ForbiddenRequestError"
            }
          },
          "404": {
            "description": "No results in the catalog",
            "schema": {
              "$ref": "#/definitions/NoResultError"
            }
          },
          "422": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/InvalidRequestError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pyramids/{ID}": {
      "post": {
        "summary": "Add an existing pyramid",
        "description": "Creates a job that adds existing pyramid file for specified catalog item. The catalog item will be updated with pyramid information. The catalog item specified should be an aggregate.",
        "operationId": "addExistingPyramidsJob",
        "parameters": [
          {
            "$ref": "#/parameters/idParam"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PyramidAddExistingParameters"
            }
          }
        ],
        "tags": [
          "Pyramids"
        ],
        "responses": {
          "202": {
            "description": "Request accepted",
            "schema": {
              "$ref": "#/definitions/JobBrief"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ForbiddenRequestError"
            }
          },
          "404": {
            "description": "No results in the catalog",
            "schema": {
              "$ref": "#/definitions/NoResultError"
            }
          },
          "422": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/InvalidRequestError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete an existing pyramid",
        "description": "Deletes pyramid information or specified catalog item id. The catalog item id may be either an aggregate or dataset item. The local pyramid file is left on server.",
        "operationId": "deleteExistingPyramidsJob",
        "parameters": [
          {
            "$ref": "#/parameters/idParam"
          },
          {
            "name": "deleteLocalFile",
            "in": "query",
            "description": "Remove local pyramid file from the server",
            "required": true,
            "type": "boolean",
            "default": false
          }
        ],
        "tags": [
          "Pyramids"
        ],
        "responses": {
          "202": {
            "description": "Request accepted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ForbiddenRequestError"
            }
          },
          "404": {
            "description": "No results in the catalog",
            "schema": {
              "$ref": "#/definitions/NoResultError"
            }
          },
          "422": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/InvalidRequestError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/thumbnails": {
      "post": {
        "summary": "Generate a thumbnail",
        "description": "Creates a job that will generate a thumbnail file. The specified catalog item will be updated with thumbnail information. Multiple catalog item ids may be specified.",
        "operationId": "startGenerateThumbnailsJob",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "List of catalog identifier(s)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ThumbnailJobParameters"
            }
          }
        ],
        "tags": [
          "Thumbnails"
        ],
        "responses": {
          "202": {
            "description": "Request accepted",
            "schema": {
              "$ref": "#/definitions/JobBrief"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ForbiddenRequestError"
            }
          },
          "404": {
            "description": "No results in the catalog",
            "schema": {
              "$ref": "#/definitions/NoResultError"
            }
          },
          "422": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/InvalidRequestError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/content/catalog/processes": {
      "get": {
        "tags": [
          "Processes"
        ],
        "summary": "Get all process datasets",
        "description": "Return list of all process dataset catalog items",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/profileParamBrief"
          },
          {
            "$ref": "#/parameters/keywordsParam"
          },
          {
            "$ref": "#/parameters/orderbyParam"
          },
          {
            "$ref": "#/parameters/startParam"
          },
          {
            "$ref": "#/parameters/maxresultsParam"
          },
          {
            "$ref": "#/parameters/classesParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/QueryResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/content/catalog/contacts": {
      "get": {
        "summary": "Get all contact types",
        "description": "Returns a list of all contact type catalog items",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/profileParamBrief"
          },
          {
            "$ref": "#/parameters/keywordsParam"
          },
          {
            "$ref": "#/parameters/orderbyParam"
          }
        ],
        "tags": [
          "Contacts"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/QueryResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/content/catalog/contacts/{ID}": {
      "get": {
        "summary": "Get a contact type",
        "description": "Returns a specific contact type catalog item. By default, the full catalog item is returned.\n",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/idParam"
          },
          {
            "$ref": "#/parameters/profileParamFull"
          }
        ],
        "tags": [
          "Contacts"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/QueryResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "404": {
            "description": "No results in the catalog",
            "schema": {
              "$ref": "#/definitions/NoResultError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a contact type",
        "description": "Deletes a specific contact type catalog item",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/idParam"
          }
        ],
        "tags": [
          "Contacts"
        ],
        "responses": {
          "204": {
            "description": "Request accepted for processing"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "404": {
            "description": "No results in the catalog",
            "schema": {
              "$ref": "#/definitions/NoResultError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/content/catalog/services": {
      "get": {
        "summary": "Get all OGC services.",
        "description": "Returns a list of all OGC service catalog items. OGC Service items can be filtered by various query parameters. By default a brief summary of each service item is returned.\n",
        "parameters": [
          {
            "$ref": "#/parameters/profileParamBrief"
          },
          {
            "$ref": "#/parameters/keywordsParam"
          },
          {
            "$ref": "#/parameters/orderbyParam"
          },
          {
            "$ref": "#/parameters/startParam"
          },
          {
            "$ref": "#/parameters/maxresultsParam"
          },
          {
            "$ref": "#/parameters/serviceClassesParam"
          },
          {
            "$ref": "#/parameters/intersectParam"
          }
        ],
        "tags": [
          "Services"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/QueryResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Harvest an OGC service",
        "description": "Harvests existing OGC service by service URL and returns the new OGC service catalog reference in the location header.",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/html"
        ],
        "parameters": [
          {
            "name": "resourceUrl",
            "in": "formData",
            "description": "OGC service URL to harvest",
            "required": true,
            "type": "string"
          },
          {
            "name": "basicauth",
            "in": "formData",
            "description": "Basic authentication encoded value only. Do not prefix encoding with the word 'basic'.",
            "required": true,
            "type": "string"
          },
          {
            "name": "reharvest",
            "in": "formData",
            "description": "Flag to indicate whether existing service resource should be updated or not.",
            "required": true,
            "type": "string",
            "default": "false"
          }
        ],
        "tags": [
          "Services"
        ],
        "responses": {
          "200": {
            "description": "Success. Use GET with keywords=ServiceName to get new catalog item information."
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "404": {
            "description": "No results in the catalog",
            "schema": {
              "$ref": "#/definitions/NoResultError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/content/catalog/services/{ID}": {
      "get": {
        "summary": "Get an OGC service",
        "description": "Returns an OGC service catalog item. By default, the full catalog item is returned.\n",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/idParam"
          },
          {
            "$ref": "#/parameters/profileParamFull"
          }
        ],
        "tags": [
          "Services"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/QueryResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "404": {
            "description": "No results in the catalog",
            "schema": {
              "$ref": "#/definitions/NoResultError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete an OGC service",
        "description": "Deletes a specific OGC service catalog item",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/idParam"
          }
        ],
        "tags": [
          "Services"
        ],
        "responses": {
          "204": {
            "description": "Request accepted for processing."
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "404": {
            "description": "No results in the catalog.",
            "schema": {
              "$ref": "#/definitions/NoResultError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/services/vector": {
      "post": {
        "summary": "Add a legacy vector service",
        "description": "Adds a new legacy vector service based on a vector provider type specified in payload.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Vector provider parameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/vectorProviderParameters"
            }
          }
        ],
        "tags": [
          "Vector Services"
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "schema": {
              "$ref": "#/definitions/ProviderResult"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "404": {
            "description": "No legacy vector service exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/InvalidRequestError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "get": {
        "summary": "Get all legacy vector service names",
        "description": "Returns a list of unique names for the existing legacy vector services.\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Vector Services"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "404": {
            "description": "No legacy vector services exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/services/vector/{providerName}": {
      "get": {
        "summary": "Get a legacy vector service",
        "description": "Returns an existing legacy vector service information by its unique name.\n",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/providerNameParam"
          }
        ],
        "tags": [
          "Vector Services"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ProviderResult"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "404": {
            "description": "No legacy vector service exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a legacy vector service",
        "description": "Deletes a specific legacy vector service catalog item by its unique name",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/providerNameParam"
          },
          {
            "$ref": "#/parameters/deleteLocalFilesParam"
          }
        ],
        "tags": [
          "Vector Services"
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "404": {
            "description": "No legacy vector service exists",
            "schema": {
              "$ref": "#/definitions/NoResultError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Vector Services"
        ],
        "summary": "Update a legacy vector service",
        "description": "Updates a specific legacy vector service catalog item by its unique name",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/providerNameParam"
          },
          {
            "$ref": "#/parameters/vectorProviderHashmapPatchPayloadParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Created/Updated",
            "schema": {
              "$ref": "#/definitions/ProviderResult"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "404": {
            "description": "No legacy vector service exists",
            "schema": {
              "$ref": "#/definitions/NoResultError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/services/context": {
      "post": {
        "summary": "Add a legacy context service",
        "description": "Adds a new legacy context service based on a context provider type specified in payload",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Context provider parameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/contextProviderParameters"
            }
          }
        ],
        "tags": [
          "Context Services"
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "schema": {
              "$ref": "#/definitions/ProviderResult"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "404": {
            "description": "No legacy context service exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/InvalidRequestError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "get": {
        "summary": "Get all legacy context service names",
        "description": "Returns a list of unique names for the existing legacy context services\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Context Services"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "404": {
            "description": "No legacy context services exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/services/context/{providerName}": {
      "get": {
        "summary": "Get a legacy context service",
        "description": "Returns an existing legacy context service information by its unique name\n",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/providerNameParam"
          }
        ],
        "tags": [
          "Context Services"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ProviderResult"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "404": {
            "description": "No legacy context service exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a legacy context service",
        "description": "Deletes a specific legacy context service catalog item by its unique name",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/providerNameParam"
          },
          {
            "$ref": "#/parameters/deleteLocalFilesParam"
          }
        ],
        "tags": [
          "Context Services"
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/UnauthorizedRequestError"
            }
          },
          "404": {
            "description": "No legacy context service exists",
            "schema": {
              "$ref": "#/definitions/NoResultError"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "CatalogId": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Catalog item id. It may have optional catalog id: [{catalog-id}_]{item-id}."
        }
      }
    },
    "CatalogIds": {
      "type": "object",
      "properties": {
        "ids": {
          "type": "array",
          "description": "Array of catalog item ids. They may have optional catalog id: [{catalog-id}_]{item-id}.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "CatalogProperty": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type code defined as follows:\n- ```'1' = string ```\n- ```'2' = 32 bit integer ```\n- ```'3' = double ```\n- ```'4' = 64-bit integer ```\n- ```'5' = float ```\n- ```'6' = date (ISO-8601 format) ```"
        },
        "value": {
          "type": "string",
          "description": "String representation of the property value"
        }
      },
      "example": {
        "property name": "property name value",
        "type": "1"
      }
    },
    "CatalogAttribute": {
      "type": "object",
      "description": "The catalog property is a name and value pair. JSON format is 'propertyName' : 'propertyValue'",
      "properties": {
        "AnyName": {
          "type": "string",
          "description": "Name value pair where AnyName is any property name followed by the value"
        }
      },
      "example": {
        "title": "title value",
        "name": "name value"
      }
    },
    "QueryResponse": {
      "type": "object",
      "properties": {
        "_encodingVersion": {
          "type": "string",
          "format": "double"
        },
        "_encodingTime": {
          "type": "integer",
          "description": "Time in milliseconds that it took to encode the response"
        },
        "results": {
          "$ref": "#/definitions/QueryResults"
        },
        "context": {
          "$ref": "#/definitions/QueryContext"
        }
      }
    },
    "QueryContext": {
      "properties": {
        "totalAvailableResults": {
          "type": "integer",
          "description": "Total number of catalog items available",
          "minimum": 0
        },
        "rootPath": {
          "type": "string"
        },
        "_class": {
          "type": "string"
        },
        "startIdx": {
          "type": "integer"
        },
        "queryTimeMillis": {
          "type": "integer"
        },
        "maxResults": {
          "type": "integer"
        },
        "queryParameters": {
          "$ref": "#/definitions/QueryParameters"
        }
      },
      "description": "Specific context of the query that was made"
    },
    "CatalogItem": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique id for the catalog item"
        },
        "parentId": {
          "type": "string",
          "description": "Id of the parent catalog folder"
        },
        "title": {
          "type": "string"
        },
        "_class": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "defaultAttachmentName": {
          "type": "string"
        }
      },
      "description": "Catalog item definition (might be a partial definition depending on the profile specified)"
    },
    "AdvancedSearchCriteria": {
      "type": "object",
      "properties": {
        "maxresults": {
          "type": "integer",
          "description": "The maximum number of catalog items to return",
          "minimum": 1
        },
        "first": {
          "type": "integer",
          "description": "Filter the results starting at this index between 0 and the total number of catalog items.",
          "minimum": 0
        },
        "orderby": {
          "type": "array",
          "description": "Return the catalog items ordered according to the given catalog property name. The property must be a valid property for the type of catalog item being queried. Use ```asc``` for ascending and ```desc``` for descending",
          "items": {
            "type": "string"
          }
        },
        "profile": {
          "type": "string",
          "description": "Profile determines the amount of detail that is returned with each catalog item",
          "enum": [
            "full",
            "summary",
            "brief"
          ],
          "default": "brief"
        },
        "template": {
          "$ref": "#/definitions/SearchTemplate"
        }
      },
      "description": "Criteria used for advanced searches of the catalog",
      "example": {
        "maxresults": 10,
        "first": 0,
        "orderby": [
          "name asc"
        ],
        "profile": "summary",
        "template": {
          "class": "com.erdas.rsp.babel.model.imagery.ImageReference",
          "properties": {
            "MeasureType": {
              "_op": "like",
              "value": "OHR",
              "type": "string"
            },
            "NIIRS": {
              "_op": "ge",
              "value": "3",
              "type": "integer"
            }
          },
          "parent": {
            "identifier": "38d3eb12-db8d-44ba-8e6b-821e7ac0e058"
          }
        }
      }
    },
    "SearchTemplate": {
      "type": "object",
      "properties": {
        "class": {
          "type": "array",
          "description": "Possible entity class names.  Possible values include:\n- ```com.erdas.rsp.babel.model.ResourceAggregate```\n- ```com.erdas.rsp.babel.model.imagery.ImageReference```\n- ```com.erdas.rsp.babel.model.vector.VectorReference```\n- ```com.erdas.rsp.babel.model.pointcloud.PointCloudResource```\n- ```com.erdas.rsp.babel.model.GenericItem```\n- ```com.erdas.rsp.babel.model.video.VideoResource```\n",
          "items": {
            "type": "string",
            "enum": [
              "com.erdas.rsp.babel.model.ResourceAggregate",
              "com.erdas.rsp.babel.model.imagery.ImageReference",
              "com.erdas.rsp.babel.model.vector.VectorReference",
              "com.erdas.rsp.babel.model.pointcloud.PointCloudResource",
              "com.erdas.rsp.babel.model.GenericItem",
              "com.erdas.rsp.babel.model.video.VideoResource"
            ]
          }
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/PropertyTemplate"
          }
        },
        "parent": {
          "type": "object",
          "properties": {}
        }
      },
      "description": "Catalog item template used for advanced search"
    },
    "PropertyTemplate": {
      "type": "object",
      "properties": {
        "_op": {
          "type": "string",
          "description": " - ```eq``` | Matches the catalog item if the given property's value equals ```value```.\n- ```gt``` | Matches the catalog item if the given property's value is greater than ```value```.\n- ```ge``` | Matches the catalog item if the given property's value is greater than or equal to ```value```.\n- ```lt``` | Matches the catalog item if the given property's value is less than ```value```.\n- ```le``` | Matches the catalog item if the given property's value is less than or equal to ```value```           ",
          "enum": [
            "eq",
            "gt",
            "ge",
            "lt",
            "le",
            "like",
            "interval",
            "intersect",
            "intersects",
            "within"
          ]
        },
        "value": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "string",
            "integer",
            "long",
            "double",
            "float",
            "date"
          ]
        },
        "lo": {
          "type": "string",
          "description": "Defines the lo value when using the interval operator"
        },
        "hi": {
          "type": "string",
          "description": "Defines the high value when using the interval operator"
        },
        "geom": {
          "type": "object",
          "description": "Defines the geometry used for the spatial operators intersect, contains, within",
          "properties": {}
        }
      }
    },
    "QueryResults": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/CatalogItem"
      }
    },
    "QueryParameters": {
      "type": "object",
      "description": "Query parameters used in the request"
    },
    "Error": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string",
          "format": "string"
        },
        "error_description": {
          "type": "string"
        }
      }
    },
    "NoResultError": {
      "type": "object",
      "properties": {
        "_encodingVersion": {
          "type": "string",
          "format": "double"
        },
        "_encodingTime": {
          "type": "integer",
          "description": "Time in milliseconds that it took to encode the response"
        },
        "errorMessage": {
          "type": "string"
        }
      }
    },
    "UnprocessableEntityError": {
      "type": "object",
      "properties": {
        "_encodingVersion": {
          "type": "string",
          "format": "double"
        },
        "_encodingTime": {
          "type": "integer",
          "description": "Time in milliseconds that it took to encode the response"
        },
        "errorMessage": {
          "type": "string"
        }
      }
    },
    "InvalidRequestError": {
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "string",
          "description": "Describes error type"
        },
        "message": {
          "type": "string",
          "description": "General description of error"
        },
        "errors": {
          "$ref": "#/definitions/FieldErrorsDefinition"
        }
      }
    },
    "UnauthorizedRequestError": {
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "string",
          "description": "Describes error type"
        },
        "message": {
          "type": "string",
          "description": "General description of error"
        }
      }
    },
    "ForbiddenRequestError": {
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "string",
          "description": "Describes error type"
        },
        "message": {
          "type": "string",
          "description": "General description of error"
        }
      }
    },
    "FieldErrorsDefinition": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/FieldErrorDefinition"
      }
    },
    "FieldErrorDefinition": {
      "type": "object",
      "required": [
        "resource",
        "field",
        "code",
        "message"
      ],
      "properties": {
        "resource": {
          "type": "string",
          "description": "Class name containing field"
        },
        "field": {
          "type": "string",
          "description": "Name of the validated field/property"
        },
        "code": {
          "type": "string",
          "description": "Short name for error"
        },
        "message": {
          "type": "string",
          "description": "Describes error in more detail related to field"
        }
      }
    },
    "ProviderResult": {
      "type": "object",
      "properties": {
        "providerType": {
          "type": "string"
        },
        "wfsCapabilitiesURL": {
          "type": "string"
        },
        "wmsCapabilitiesURL": {
          "type": "string"
        },
        "serviceURL": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "Rights": {
      "type": "object",
      "properties": {
        "principal": {
          "type": "string",
          "description": "Principal."
        },
        "reader": {
          "type": "boolean",
          "description": "Whether the current principal has read privilege for this catalog item."
        },
        "updater": {
          "type": "boolean",
          "description": "Whether the current principal has update privilege for this catalog item."
        },
        "deleter": {
          "type": "boolean",
          "description": "Whether the current principal has delete privilege for this catalog item."
        },
        "executer": {
          "type": "boolean",
          "description": "Whether the current principal has execute privilege for this catalog item."
        },
        "manager": {
          "type": "boolean",
          "description": "Whether the current principal has management privilege for this catalog item."
        }
      },
      "description": "Right for a given principal."
    },
    "CurrentUserRightsSummary": {
      "type": "object",
      "properties": {
        "principal": {
          "type": "string",
          "description": "Current user id."
        },
        "reader": {
          "type": "boolean",
          "description": "Whether the current user has read privilege for this catalog item."
        },
        "updater": {
          "type": "boolean",
          "description": "Whether the current user has update privilege for this catalog item."
        },
        "deleter": {
          "type": "boolean",
          "description": "Whether the current user has delete privilege for this catalog item."
        },
        "executer": {
          "type": "boolean",
          "description": "Whether the current user has execute privilege for this catalog item."
        },
        "manager": {
          "type": "boolean",
          "description": "Whether the current user has management privilege for this catalog item."
        },
        "itemIsShared": {
          "type": "boolean",
          "description": "Whether the catalog item is shared."
        }
      }
    },
    "BulkProperty": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the property."
        },
        "type": {
          "type": "string",
          "description": "Type code defined as follows:\n- ```'1' = string ```\n- ```'2' = 32 bit integer ```\n- ```'3' = double ```\n- ```'4' = 64-bit integer ```\n- ```'5' = float ```\n- ```'6' = date (ISO-8601 format) ```"
        },
        "value": {
          "type": "string",
          "description": "String representation of the property value."
        },
        "newname": {
          "type": "string",
          "description": "The new name to be given to the property."
        }
      },
      "description": "Definition of a property which is to be added, modified or renamed. Provide type and value in order to add or modify the property or provide newname in order to rename the property."
    },
    "LockSpecification": {
      "type": "object",
      "properties": {
        "ids": {
          "type": "array",
          "description": "The ids of catalog items that are to be locked. They may have optional catalog id: [{catalog-id}_]{item-id}.",
          "items": {
            "$ref": "#/definitions/CatalogIds"
          }
        },
        "lockId": {
          "type": "string",
          "description": "The id of the lock set."
        }
      },
      "description": "Specification of items to be locked as a set."
    },
    "LockSetIdentification": {
      "type": "object",
      "properties": {
        "lockId": {
          "type": "string",
          "description": "The id of the lock set."
        }
      },
      "description": "Identification of a lock set."
    },
    "UpdateSet": {
      "type": "object",
      "properties": {
        "ids": {
          "type": "array",
          "description": "The ids of catalog items that are to be updated. They may have optional catalog id: [{catalog-id}_]{item-id}.",
          "items": {
            "$ref": "#/definitions/CatalogIds"
          }
        },
        "patch": {
          "type": "array",
          "description": "A list of properties that are to be given a new value for each given catalog item, and their new values.",
          "items": {
            "$ref": "#/definitions/CatalogAttribute"
          }
        },
        "rightsput": {
          "type": "array",
          "description": "A list of security principals (users and roles) and acc that are to be given access to the given catalog items or whose access rights are to be modified. If adding a new principal, missing rights will be denied. If modifying an existing principal, missing rights will not be changed.",
          "items": {
            "$ref": "#/definitions/Rights"
          }
        },
        "rightsdelete": {
          "type": "array",
          "description": "The names of security principals whose access rights to the given catalog items are to be revoked.",
          "items": {
            "type": "string",
            "description": "The name of a security principal -- either a user or a role."
          }
        },
        "propertiesput": {
          "type": "array",
          "description": "A list of catalog item properties that are to be added to each given catalog item.",
          "items": {
            "$ref": "#/definitions/BulkProperty"
          }
        },
        "propertiesdelete": {
          "type": "array",
          "description": "The names of catalog item properties that are to be deleted from the properties collection of each given catalog item.",
          "items": {
            "type": "string",
            "description": "The name of a catalog item property."
          }
        }
      },
      "description": "A list of catalog items that are to be updated and the set of operations that are to be applied to all of them."
    },
    "ScaleRangeDefinition": {
      "type": "object",
      "description": "Provides ability to specify the scales a principal can view the data, or more simply, how detailed an image the principal will be able to see",
      "required": [
        "upperBound",
        "lowerBound"
      ],
      "properties": {
        "upperBound": {
          "type": "number",
          "format": "double",
          "description": "Upper bound scale limit for a principal"
        },
        "lowerBound": {
          "type": "number",
          "format": "double",
          "description": "Upper bound scale limit for a principal"
        }
      }
    },
    "SpatialRangeDefinition": {
      "description": "Providers ability to restrict the access of the principal to the data based on specified areas",
      "type": "object",
      "required": [
        "srs",
        "areaAsString",
        "inclusive"
      ],
      "properties": {
        "srs": {
          "type": "string",
          "description": "Spatial reference system of the specific area defined",
          "default": "EPSG:4326"
        },
        "areaAsString": {
          "description": "Specific area defined that applies to principal's access. Enter the points in the following format: X1,Y1 X2,Y2 X3,Y3 ... Xn,Yn",
          "type": "string"
        },
        "inclusive": {
          "type": "boolean",
          "description": "If true, a principal can access only the specific area. If false, principal can access everything except the specific area",
          "default": true
        }
      }
    },
    "PermissionsDefinition": {
      "description": "Provides ability to specify what the selected principal will be allowed to do with the data discovered during the crawl",
      "type": "object",
      "required": [
        "read",
        "update",
        "delete",
        "manage",
        "execute"
      ],
      "properties": {
        "read": {
          "description": "Ability to view the data in Apollo catalog",
          "type": "boolean",
          "default": false
        },
        "update": {
          "description": "Ability to alter the data in Apollo catalog",
          "type": "boolean",
          "default": false
        },
        "delete": {
          "description": " Ability to remove the entry of the data from the Apollo catalog",
          "type": "boolean",
          "default": false
        },
        "manage": {
          "description": "Ability to define security settings for other principals",
          "type": "boolean",
          "default": false
        },
        "execute": {
          "description": "Ability to execute operations on the Apollo catalog",
          "type": "boolean",
          "default": false
        }
      }
    },
    "AggregateParams": {
      "type": "object",
      "required": [
        "parent",
        "name"
      ],
      "properties": {
        "parent": {
          "$ref": "#/definitions/CatalogId"
        },
        "name": {
          "type": "string"
        },
        "defaultSRS": {
          "type": "string",
          "default": "EPSG:4326"
        }
      },
      "example": {
        "parent": {
          "id": "01079cf45ba6e71b015ba6e7695a0000"
        },
        "name": "TestAggregate",
        "defaultSRS": "EPSG:4326"
      }
    },
    "AttachmentParams": {
      "type": "object",
      "required": [
        "name",
        "path",
        "mimeType"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name assigned to attachment"
        },
        "path": {
          "type": "string",
          "description": "A URI reference to point to attachment. Examples: file:///c:/TEMP/file.xml, http://example.org/resource.txt"
        },
        "mimeType": {
          "type": "string",
          "description": "A MIME type is a label used to identify a type of data. Example: 'text/html'"
        }
      }
    },
    "BaseCatalogItemParams": {
      "type": "object",
      "properties": {
        "parent": {
          "$ref": "#/definitions/CatalogId"
        },
        "name": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "fileURI": {
          "type": "string"
        },
        "path": {
          "type": "string"
        }
      }
    },
    "contextProviderParameters": {
      "type": "object",
      "required": [
        "mapProviderType",
        "name",
        "registerServiceInCatalog",
        "fileLocation"
      ],
      "properties": {
        "mapProviderType": {
          "type": "string",
          "enum": [
            "Context"
          ],
          "default": "Context",
          "description": "Descriminator for service type"
        },
        "name": {
          "type": "string",
          "default": "TestService1",
          "description": "Unique name for the service provider"
        },
        "title": {
          "type": "string",
          "description": "Optional. A descriptive title for the service provider"
        },
        "abstract": {
          "type": "string",
          "description": "Optional. A brief description of the service provider"
        },
        "keywords": {
          "type": "string",
          "description": "Optional. A comma-separated list of words that help to describe the service provider. These words can be used to help the system return this service provider in response to relevant searches."
        },
        "registerServiceInCatalog": {
          "type": "boolean",
          "default": true,
          "description": "Registers the service provider in Apollo catalog so that it appears in searches of the catalog"
        },
        "fileLocation": {
          "type": "string",
          "description": "This field represents a specific file or a directory as the data source"
        },
        "uploadFilesToServer": {
          "type": "boolean",
          "description": "If this field is True,the files in the fileLocation property will be copied to the server; if False, files will be referenced from their current location",
          "default": false
        }
      }
    },
    "vectorProviderParameters": {
      "type": "object",
      "required": [
        "vectorProviderType",
        "name",
        "wfsServiceVersion"
      ],
      "properties": {
        "vectorProviderType": {
          "type": "string",
          "enum": [
            "Shape",
            "Oracle",
            "SqlServer",
            "Postgres",
            "GML"
          ],
          "default": "Shape",
          "description": "Descriminator for service type"
        },
        "name": {
          "type": "string",
          "default": "WFSService1",
          "description": "Unique name for the service provider"
        },
        "title": {
          "type": "string",
          "description": "Optional. A descriptive title for the service provider"
        },
        "abstract": {
          "type": "string",
          "description": "Optional. A brief description of the service provider"
        },
        "keywords": {
          "type": "string",
          "description": "Optional. A comma-separated list of words that help to describe the service provider. These words can be used to help the system return this service provider in response to relevant searches"
        },
        "indexData": {
          "type": "boolean",
          "default": true,
          "description": "Creates RTree files beside the shapefiles for optimized access"
        },
        "generateTypesAndMappings": {
          "type": "boolean",
          "default": true,
          "description": "Generate the types and mappings files needed to map vector data into features in a WFS"
        },
        "registerServiceInCatalog": {
          "type": "boolean",
          "default": true,
          "description": "Optional. Registers the service provider in Apollo catalog so that it appears in searches of the catalog"
        },
        "databaseTablePattern": {
          "type": "string",
          "default": "%",
          "description": "Used to filter the layers that will be added to the web service.  % is the default and implies you will be adding all available datasets or layers into the service"
        },
        "databaseSchema": {
          "type": "string",
          "description": "Provides ability to choose which database schema to use, if your input data source is a database"
        },
        "wfsServiceVersion": {
          "type": "string",
          "description": "Supported WFS/GML versions",
          "enum": [
            "wfs1.1 - gml3.1.1",
            "wfs1.2 - gml3.2"
          ],
          "default": "wfs1.1 - gml3.1.1"
        },
        "autoDetectGeometryTypes": {
          "type": "boolean",
          "description": "Enables scan of the source data to determine the geometry type(s) used"
        },
        "fileLocation": {
          "type": "string",
          "description": "This field represents a specific file or a directory as the data source. This field is not required if using database as the data source."
        },
        "uploadFilesToServer": {
          "type": "boolean",
          "description": "If this field is True,the files in the fileLocation property will be copied to the server; if False, files will be referenced from their current location.",
          "default": false
        },
        "spatialReferenceSystem": {
          "type": "string",
          "description": "Shape file spatial reference system. Example: 'EPSG:4326'"
        },
        "databaseHost": {
          "type": "string",
          "description": "Host machine of database source. Not required if using fileLocation"
        },
        "databasePort": {
          "type": "integer",
          "description": "Port number of host machine of database source. Not required if using fileLocation"
        },
        "databaseUser": {
          "type": "string",
          "description": "User name to login into database source. Not required if using fileLocation"
        },
        "databasePassword": {
          "type": "string",
          "description": "Password to login into database source. Not required if using fileLocation"
        },
        "databaseName": {
          "type": "string",
          "description": "Name to login into database source. Not required if using fileLocation"
        },
        "databaseSid": {
          "type": "string",
          "description": "(Oracle only) SID for database source. Not required if using fileLocation"
        },
        "databaseServiceName": {
          "type": "string",
          "description": "ServiceName for database source. Not required if using fileLocation"
        },
        "databaseInstance": {
          "type": "string",
          "description": "(SQL Server only)Instance name for database source. Not required if using fileLocation"
        },
        "enableWFS": {
          "type": "boolean",
          "description": "Enable/disable the WFS interface. The default value is true to enable.",
          "default": true
        },
        "enableWMS": {
          "type": "boolean",
          "description": "Enable/disable the WMS interface. The default value is true to enable.",
          "default": true
        }
      }
    },
    "ClipZipShipParametersDefinition": {
      "type": "object",
      "required": [
        "global",
        "requests",
        "emailAddress"
      ],
      "properties": {
        "global": {
          "$ref": "#/definitions/czsGlobalDefinition"
        },
        "requests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/czsRequestDefinition"
          }
        },
        "emailAddress": {
          "type": "string",
          "description": "Email notifications of the provisioning job will be sent"
        },
        "deleteJobIfComplete": {
          "type": "boolean",
          "description": "Provides ability to keep a job even it is completed successfully. Review job at jobs endpoint using jobId",
          "default": false
        },
        "ignoreWarnings": {
          "type": "boolean",
          "description": "Provides ability to ignore validation warnings. An exception will be ignored if validation fails and value is true",
          "default": false
        }
      },
      "example": {
        "global": {
          "clipMethod": "entire",
          "extent": {},
          "outputSrs": "original"
        },
        "requests": [
          {
            "catalogItemName": "19155555",
            "requestType": "RASTER",
            "clipMethod": "custom",
            "outputSrs": "EPSG:4326",
            "extent": {
              "srs": "EPSG:4326",
              "epsgId": 4326,
              "type": "multipolygon",
              "cardinality": 2,
              "data": [
                [
                  -84.377,
                  34.233,
                  -84.377,
                  34.225,
                  -84.37,
                  34.225,
                  -84.37,
                  34.233,
                  -84.377,
                  34.233
                ]
              ]
            },
            "las": {},
            "raster": {
              "outputFormat": "IMG",
              "interpolation": "nearest neighbor",
              "channelAxis": "Band",
              "channels": [
                "band1",
                "band2",
                "band3"
              ],
              "measurementType": "resolution",
              "measurementXValue": 0.5,
              "measurementYValue": 0.5
            }
          }
        ],
        "emailAddress": "your.email@yourCompany.com",
        "deleteJobIfComplete": false,
        "ignoreWarnings": true
      }
    },
    "CrawlJobParametersDefinition": {
      "type": "object",
      "required": [
        "crawlType",
        "crawlProperties"
      ],
      "properties": {
        "crawlType": {
          "$ref": "#/definitions/BaseCrawlTypeDefinition"
        },
        "crawlProperties": {
          "$ref": "#/definitions/CrawlPropertiesDefinition"
        }
      },
      "example": {
        "crawlType": {
          "files": {
            "replicateDirectory": true,
            "directory": "//machineName/testdata",
            "fileExtensions": [
              ".*"
            ]
          }
        },
        "crawlProperties": {
          "parentId": "01079cf45b1538e7015b15392e4b0000",
          "footprintAsExtent": true,
          "scheduleSettings": {
            "immediate": true
          },
          "generatePyramids": "none",
          "generateThumbnails": "none",
          "viewServices": {
            "aggregate": {
              "wmtsEnabled": false
            },
            "dataset": {
              "wmsEnabled": true,
              "wmtsEnabled": false,
              "geoservicesEnabled": false,
              "ecwpEnabled": true,
              "jpipEnabled": false
            }
          },
          "downloadServices": {
            "aggregate": {
              "czsEnabled": true
            },
            "dataset": {
              "czsEnabled": false,
              "wcsEnabled": false
            }
          },
          "metadataParsers": {
            "parsers": [
              "Landsat7",
              "RADARSAT-2"
            ],
            "executionStrategy": "firstSuccess"
          },
          "securitySettings": [
            {
              "principalName": "esp_administrator",
              "permissions": {
                "read": true,
                "update": true,
                "delete": true,
                "manage": true,
                "execute": true
              }
            },
            {
              "principalName": "esp_data_manager",
              "permissions": {
                "read": true,
                "update": true,
                "delete": true,
                "manage": true,
                "execute": true
              },
              "scaleRange": {
                "lowerBound": 50000,
                "upperBound": 100000
              },
              "spatialRange": {
                "srs": "EPSG:4326",
                "areaAsString": "-89.41302727101002,31.142166886974813 -89.41048659895588,31.142166886974813 -89.41048659895588,31.139981598536828 -89.41302727101002,31.139981598536828",
                "inclusive": true
              }
            }
          ]
        }
      }
    },
    "DropBoxParametersDefinition": {
      "type": "object",
      "description": "A representation of a drop box input parameters for monitoring incoming datasets",
      "required": [
        "sourceDirectory",
        "targetDirectory",
        "fileExtensions",
        "parentId",
        "footprintAsExtent",
        "scheduleSettings",
        "viewServices",
        "downloadServices",
        "generatePyramids",
        "generateThumbnails",
        "securitySettings"
      ],
      "properties": {
        "sourceDirectory": {
          "type": "string",
          "description": "The full path of the drop box source/input directory"
        },
        "targetDirectory": {
          "type": "string",
          "description": "The full path of the drop box target/output. NOTE: The target directory set for the drop box cannot be reparented."
        },
        "fileExtensions": {
          "type": "array",
          "description": "File extension(s) to monitor",
          "items": {
            "$ref": "#/definitions/FileExtensionDefinition"
          }
        },
        "parentId": {
          "type": "string",
          "description": "Aggregate catalog id to be the parent of the crawled datasets"
        },
        "footprintAsExtent": {
          "description": "If true, footprints will be generated identical to the spatial extent of the aggregate or dataset if true; however, if false, the footprints will only contain the valid data found within the aggregate or dataset",
          "type": "boolean",
          "default": true
        },
        "scheduleSettings": {
          "$ref": "#/definitions/ScheduleSettings"
        },
        "viewServices": {
          "$ref": "#/definitions/ViewServiceSettings"
        },
        "downloadServices": {
          "$ref": "#/definitions/DownloadServices"
        },
        "generatePyramids": {
          "type": "string",
          "description": "Enables generation of pyramids for aggregates, datasets, both or none",
          "enum": [
            "none",
            "both",
            "aggregates",
            "datasets"
          ]
        },
        "generateThumbnails": {
          "type": "string",
          "description": "Enables generation of thumbnails for aggregates, datasets, both or none",
          "enum": [
            "none",
            "both",
            "aggregates",
            "datasets"
          ]
        },
        "metadataParsers": {
          "$ref": "#/definitions/MetadataParserSettings"
        },
        "securitySettings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SecuritySettingsDefinition"
          }
        }
      },
      "example": {
        "sourceDirectory": "//machineName/dropboxSource",
        "targetDirectory": "//machineName/dropboxTarget",
        "fileExtensions": [
          ".*"
        ],
        "parentId": "01079cf45b1538e7015b15392e4b0000",
        "footprintAsExtent": true,
        "scheduleSettings": {
          "immediate": true
        },
        "generatePyramids": "none",
        "generateThumbnails": "none",
        "viewServices": {
          "aggregate": {
            "wmsEnabled": true,
            "wmtsEnabled": false
          },
          "dataset": {
            "wmsEnabled": true,
            "wmtsEnabled": false,
            "geoservicesEnabled": false,
            "ecwpEnabled": true,
            "jpipEnabled": false
          }
        },
        "downloadServices": {
          "aggregate": {
            "czsEnabled": true,
            "wcsEnabled": true
          },
          "dataset": {
            "czsEnabled": false,
            "wcsEnabled": false
          }
        },
        "metadataParsers": {
          "metadataParsers": [
            "Landsat7",
            "RADARSAT-2"
          ],
          "executionStrategy": "firstSuccess"
        },
        "securitySettings": [
          {
            "principalName": "esp_administrator",
            "permissions": {
              "read": true,
              "update": true,
              "delete": true,
              "manage": true,
              "execute": true
            }
          },
          {
            "principalName": "esp_data_manager",
            "permissions": {
              "read": true,
              "update": true,
              "delete": true,
              "manage": true,
              "execute": true
            },
            "scaleRange": {
              "lowerBound": 50000,
              "upperBound": 100000
            },
            "spatialRange": {
              "srs": "EPSG:4326",
              "areaAsString": "-89.41302727101002,31.142166886974813 -89.41048659895588,31.142166886974813 -89.41048659895588,31.139981598536828 -89.41302727101002,31.139981598536828",
              "inclusive": true
            }
          }
        ]
      }
    },
    "BaseCrawlTypeDefinition": {
      "type": "object",
      "properties": {
        "files": {
          "$ref": "#/definitions/FilesCrawl"
        },
        "database": {
          "$ref": "#/definitions/DatabaseCrawl"
        }
      }
    },
    "FilesCrawl": {
      "description": "A representation of a files crawl input parameters",
      "required": [
        "replicateDirectory",
        "directory",
        "files",
        "fileExtensions"
      ],
      "properties": {
        "replicateDirectory": {
          "type": "boolean",
          "default": false,
          "description": "If true, any subdirectory found under the 'directory' to crawl will be created as an aggregate and will be the parent aggregate for any datasets it contains"
        },
        "directory": {
          "type": "string",
          "description": "The directory to search. Leave as empty string if using 'files' option"
        },
        "files": {
          "type": "array",
          "description": "A list of specific files to crawl into the 'parentId' aggregate. Leave as empty [] if using 'directory' option",
          "items": {
            "type": "string"
          }
        },
        "fileExtensions": {
          "type": "array",
          "description": "An example of supported file extensions for decoding but not all are included. Leave empty [] if you want to include all supported extensions",
          "items": {
            "$ref": "#/definitions/FileExtensionDefinition"
          }
        }
      }
    },
    "FileExtensionDefinition": {
      "description": "An example of file extension types;however,not a complete list",
      "type": "string",
      "enum": [
        ".*",
        "shp",
        "ecw",
        "img",
        "jp2",
        "tif",
        "las"
      ]
    },
    "DatabaseCrawl": {
      "description": "A representation of a database crawl input parameters",
      "type": "object",
      "required": [
        "connectionName",
        "databaseType",
        "server",
        "port",
        "username",
        "password"
      ],
      "properties": {
        "server": {
          "type": "string",
          "description": "Name of the server that hosts the database"
        },
        "port": {
          "type": "integer",
          "format": "int32",
          "description": "TCP port used for the connection"
        },
        "username": {
          "type": "string",
          "description": "Name of the database user for the connection"
        },
        "password": {
          "type": "string",
          "description": "Password for the database user"
        },
        "queryTimeout": {
          "type": "integer",
          "format": "int32",
          "description": "The number of seconds to wait before canceling long-running queries. The default value is 0, which means no timeout is imposed"
        },
        "additionalInfo": {
          "type": "string",
          "description": "Additional connection parameters that will be appended to the generated connection string. The value must be formatted correctly according to the requirements of the target database system’s connection string. This parameter is optional and may be left blank"
        },
        "connectionName": {
          "type": "string",
          "description": "The name to give to this connection when it is saved in the catalog. The connection name must be unique. A new Aggregate having the same name as the connection will be created to contain the datasets from the crawl."
        },
        "databaseType": {
          "type": "string",
          "description": "The type of database",
          "enum": [
            "oracle",
            "mssql",
            "postgres"
          ]
        },
        "databaseName": {
          "type": "string",
          "description": "(PostGIS and SQL Server only) – The name of the database to which to connect"
        },
        "databaseInstance": {
          "type": "string",
          "description": " (SQL Server only) – The name of the database instance"
        },
        "srs": {
          "type": "string",
          "description": "The SRS to use for the data in the database if the data does not specify one explicitly"
        },
        "sid": {
          "type": "string",
          "description": "(Oracle only) – System ID of the Oracle database instance. Leave blank if using a Service Name"
        },
        "serviceName": {
          "type": "string",
          "description": "(Oracle only) – The service name of the Oracle database. Leave blank if using a SID"
        },
        "tableOrViewPattern": {
          "type": "string",
          "description": "The table name pattern will be used to filter the names of tables and views to crawl"
        }
      }
    },
    "CrawlPropertiesDefinition": {
      "description": "A representation of crawl properties",
      "type": "object",
      "required": [
        "parentId",
        "footprintAsExtent",
        "scheduleSettings",
        "viewServices",
        "downloadServices",
        "generatePyramids",
        "generateThumbnails",
        "securitySettings"
      ],
      "properties": {
        "parentId": {
          "type": "string",
          "description": "Aggregate catalog id to be the parent of the crawled datasets"
        },
        "footprintAsExtent": {
          "description": "If true, footprints will be generated identical to the spatial extent of the aggregate or dataset if true; however, if false, the footprints will only contain the valid data found within the aggregate or dataset",
          "type": "boolean",
          "default": true
        },
        "scheduleSettings": {
          "$ref": "#/definitions/ScheduleSettings"
        },
        "viewServices": {
          "$ref": "#/definitions/ViewServiceSettings"
        },
        "downloadServices": {
          "$ref": "#/definitions/DownloadServices"
        },
        "generatePyramids": {
          "type": "string",
          "description": "Enables generation of pyramids for aggregates, datasets, both or none",
          "enum": [
            "none",
            "both",
            "aggregates",
            "datasets"
          ]
        },
        "generateThumbnails": {
          "type": "string",
          "description": "Enables generation of thumbnails for aggregates, datasets, both or none",
          "enum": [
            "none",
            "both",
            "aggregates",
            "datasets"
          ]
        },
        "metadataParsers": {
          "$ref": "#/definitions/MetadataParserSettings"
        },
        "securitySettings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SecuritySettingsDefinition"
          }
        }
      }
    },
    "DeleteJobParameters": {
      "type": "object",
      "description": "A representation of input parameters to remove catalog items and any associated items from the Apollo catalog",
      "required": [
        "ids"
      ],
      "properties": {
        "ids": {
          "type": "array",
          "description": "List of comma delimited catalog ids to remove from the Apollo catalog",
          "items": {
            "type": "string"
          }
        },
        "deleteJobIfComplete": {
          "type": "boolean",
          "default": false,
          "description": "Provides ability to keep a job even it is completed successfully. Review job at jobs endpoint using jobId"
        }
      }
    },
    "MetadataUpdateJobParameters": {
      "type": "object",
      "description": "A representation of input parameters that updates ISO metadata for a list of catalog items",
      "required": [
        "ids",
        "forAggregates",
        "forDatasets"
      ],
      "properties": {
        "ids": {
          "type": "array",
          "description": "List of comma delimited catalog item ids",
          "items": {
            "type": "string"
          }
        },
        "forAggregates": {
          "type": "boolean",
          "description": "Update ISO metadata for catalog aggregates"
        },
        "forDatasets": {
          "type": "boolean",
          "description": "Update ISO metadata for catalog items"
        },
        "deleteJobIfComplete": {
          "description": "Provides ability to keep a job even it is completed successfully. Review job at jobs endpoint using jobId.",
          "type": "boolean",
          "default": false
        }
      }
    },
    "MoveJobParameters": {
      "type": "object",
      "description": "A representation of input parameters to move catalog items to a new parent folder",
      "required": [
        "ids",
        "newParentFolderId",
        "restoreFolders"
      ],
      "properties": {
        "ids": {
          "type": "array",
          "description": "List of comma delimited catalog item ids",
          "items": {
            "type": "string"
          }
        },
        "newParentFolderId": {
          "type": "string",
          "description": "Target parent id for the moved catalog items"
        },
        "restoreFolders": {
          "$ref": "#/definitions/restoreFolderProperties"
        },
        "deleteJobIfComplete": {
          "description": "Provides ability to keep a job even it is completed successfully. Review job at jobs endpoint using jobId.",
          "type": "boolean",
          "default": false
        }
      }
    },
    "restoreFolderProperties": {
      "type": "object",
      "required": [
        "applyToChildren",
        "restorePyramids",
        "restoreThumbnails",
        "restoreISOFiles",
        "restoreFootprints"
      ],
      "description": "Optional property. Restores modified folders based on the specified properties",
      "properties": {
        "applyToChildren": {
          "type": "boolean",
          "description": "Starting with first folder below root, if true, extents are restored and footprint generated for all children of the folder. If false, only the immediate parent will have extents restored and footprint generated.",
          "default": false
        },
        "restorePyramids": {
          "type": "boolean",
          "description": "If true, the generate pyramids task will be executed for the modified folders",
          "default": false
        },
        "restoreThumbnails": {
          "type": "boolean",
          "description": "If true, the generate thumbnails task will be executed for the modified folders",
          "default": false
        },
        "restoreISOFiles": {
          "type": "boolean",
          "description": "If true, generate ISO metadata task will be executed for the modified folders",
          "default": false
        },
        "restoreFootprints": {
          "enum": [
            "extent",
            "activeArea"
          ],
          "description": "The generate footprint task will be executed for the modified folders using either extent or activeArea.The default is extent",
          "default": "extent"
        }
      }
    },
    "JobBrief": {
      "type": "object",
      "description": "Properties to describe the job",
      "properties": {
        "jobId": {
          "type": "string",
          "description": "Unique identifier for a job"
        },
        "displayableStatus": {
          "type": "string",
          "description": "Verbose description for a job"
        },
        "progress": {
          "type": "string",
          "description": "Percentage of completion for a job"
        },
        "state": {
          "type": "string",
          "description": "Internal state of job given in pre-defined type strings",
          "enum": [
            "WAITING",
            "PAUSED",
            "ERROR",
            "BLOCKED",
            "COMPLETE",
            "RUNNING",
            "CANCELING"
          ]
        },
        "startTime": {
          "type": "string",
          "description": "The start time of a job"
        },
        "endTime": {
          "type": "string",
          "description": "The end time of a job"
        }
      }
    },
    "MetadataParserSettings": {
      "type": "object",
      "required": [
        "parsers",
        "executionStrategy"
      ],
      "description": "Specify any metadata parsers to detect the metadata when APOLLO registers the data in the catalog",
      "properties": {
        "parsers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetadataParserTypeDefinitions"
          }
        },
        "executionStrategy": {
          "description": "If strategy is 'firstSucess, do not attempt to run any more metadata parsers once one of the metadata parser runs successfully.",
          "type": "string",
          "default": "firstSuccess",
          "enum": [
            "firstSuccess",
            "executeAll"
          ]
        }
      }
    },
    "MetadataParserTypeDefinitions": {
      "type": "string",
      "enum": [
        "DIMAP",
        "Russian Satellite",
        "QuickBird",
        "Landsat5 (Fast Format rev. B)",
        "Landsat7",
        "EROS",
        "IRS 1C-1D(Fast Format)",
        "DAT",
        "SPOT",
        "HDF",
        "HDF (ISO 19139)",
        "IKONOS",
        "RADARSAT-2",
        "DiMAP-v2",
        "ISO 19139"
      ]
    },
    "SecuritySettingsDefinition": {
      "type": "object",
      "description": "Provides ability to add or remove principals, define allowed operations per principal, and specify allowed spatial range view per principal",
      "required": [
        "principalName",
        "permissions"
      ],
      "properties": {
        "principalName": {
          "description": "A user or role name to assign permissions",
          "type": "string"
        },
        "permissions": {
          "$ref": "#/definitions/PermissionsDefinition"
        },
        "scaleRange": {
          "$ref": "#/definitions/ScaleRangeDefinition"
        },
        "spatialRange": {
          "$ref": "#/definitions/SpatialRangeDefinition"
        }
      }
    },
    "PyramidAddExistingParameters": {
      "description": "Provides the ability to attach pyramid layer files to an aggregate in the Apollo catalog",
      "type": "object",
      "properties": {
        "aggregateId": {
          "type": "string",
          "description": "Parent catalog item id that contains the image to add pyramids"
        },
        "filePath": {
          "type": "string",
          "description": "The path of the pyramid layer file to add"
        },
        "decimationFactor": {
          "type": "number",
          "format": "double",
          "description": "The number of pixels in a layer that will be represented by one pixel in the next pyramid layer. The most common decimation factor is two, which means that a 2x2 square of pixels will be represented in the next layer"
        },
        "deleteJobIfComplete": {
          "description": "Provides ability to keep a job even it is completed successfully. Review job at jobs endpoint using jobId.",
          "type": "boolean",
          "default": false
        }
      }
    },
    "PyramidDeleteExistingParameters": {
      "description": "Provides the ability to delete pyramid layers for data after it has been registered in the catalog",
      "type": "object",
      "properties": {
        "catalogItemId": {
          "type": "string",
          "description": "The parent catalog item containing the pyramid to delete"
        },
        "deleteLocalFile": {
          "type": "boolean",
          "default": false,
          "description": "If true, deletes the pyramid file as well as disassociates it from the aggregate. If false,keeps the pyramid file even though it is no longer associated with the aggregate"
        },
        "deleteJobIfComplete": {
          "description": "Provides ability to keep a job even it is completed successfully. Review job at jobs endpoint using jobId.",
          "type": "boolean",
          "default": false
        }
      }
    },
    "PyramidJobParameters": {
      "type": "object",
      "description": "Properties to create pyramid layers for data after it has been registered in the catalog",
      "required": [
        "ids"
      ],
      "properties": {
        "applyToChildAggregates": {
          "type": "boolean",
          "default": true,
          "description": "Generate pyramids for the specified aggregate, all of the datasets directly inside of it, and all of the child datasets and aggregates that are nested inside of it"
        },
        "applyToChildDatasets": {
          "type": "boolean",
          "default": true,
          "description": "Generate pyramids for datasets directly inside the aggregate"
        },
        "ids": {
          "description": "List of comma delimited catalog item ids",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "deleteJobIfComplete": {
          "description": "Provides ability to keep a job even it is completed successfully. Review job at jobs endpoint using jobId.",
          "type": "boolean",
          "default": false
        }
      }
    },
    "RecurringJob": {
      "description": "Crawl will run automatically at a specific interval and time",
      "type": "object",
      "required": [
        "startDateTime",
        "occurrence"
      ],
      "properties": {
        "startDateTime": {
          "description": "A string with ISO8601 datetime format",
          "type": "string",
          "format": "date-time"
        },
        "occurrence": {
          "description": "Types of schedule settings",
          "type": "string",
          "enum": [
            "ONCE",
            "HOURLY",
            "DAILY",
            "WEEKLY",
            "MONTHLY"
          ],
          "default": "ONCE"
        }
      }
    },
    "ScheduleSettings": {
      "description": "Schedule the crawl job",
      "type": "object",
      "properties": {
        "recurringJob": {
          "$ref": "#/definitions/RecurringJob"
        },
        "immediate": {
          "description": "Crawl job will begin immediately",
          "type": "boolean",
          "default": false
        },
        "deleteJobIfComplete": {
          "description": "Provides ability to keep a job even it is completed successfully. Review job at jobs endpoint using jobId.",
          "type": "boolean",
          "default": false
        }
      }
    },
    "ThumbnailJobParameters": {
      "type": "object",
      "description": "A representation of generate thumbnails input parameters",
      "required": [
        "ids"
      ],
      "properties": {
        "replaceExisting": {
          "type": "boolean",
          "default": false,
          "description": "If true, update the thumbnail when a search produces new data"
        },
        "applyToChildren": {
          "type": "boolean",
          "default": false,
          "description": "If true, generate thumbnail for selected aggregate and its children"
        },
        "ids": {
          "type": "array",
          "description": "List of comma delimited catalog item ids",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "DownloadServices": {
      "description": "Provides ability to enable/disable all download services (CZS and WCS) for aggregates or datasets",
      "type": "object",
      "properties": {
        "aggregate": {
          "$ref": "#/definitions/downloadServicesAggregateDefinition"
        },
        "dataset": {
          "$ref": "#/definitions/downloadServicesDatasetDefinition"
        }
      }
    },
    "downloadServicesAggregateDefinition": {
      "type": "object",
      "properties": {
        "czsEnabled": {
          "description": "Makes the data discovered during the crawl available to the Clip-Zip-Ship service",
          "type": "boolean",
          "default": true
        }
      }
    },
    "downloadServicesDatasetDefinition": {
      "type": "object",
      "properties": {
        "czsEnabled": {
          "description": "Makes the data discovered during the crawl available to the Clip-Zip-Ship service",
          "type": "boolean",
          "default": true
        },
        "wcsEnabled": {
          "description": "Makes the data discovered during the crawl available to a Web Coverage Service (WCS)",
          "type": "boolean",
          "default": true
        }
      }
    },
    "ViewServiceSettings": {
      "description": "Provides ability to enable/disable all viewing services (WMS, WMTS, GeoServices, ECWP and JPIP) for aggregates or datasets",
      "type": "object",
      "properties": {
        "aggregate": {
          "$ref": "#/definitions/viewServicesAggregateDefinition"
        },
        "dataset": {
          "$ref": "#/definitions/viewServicesDatasetDefinition"
        }
      }
    },
    "viewServicesAggregateDefinition": {
      "type": "object",
      "properties": {
        "wmtsEnabled": {
          "description": "Makes the data discovered during the crawl available to a Web Map Tile Service (WMTS)",
          "type": "boolean",
          "default": true
        }
      }
    },
    "viewServicesDatasetDefinition": {
      "type": "object",
      "properties": {
        "wmsEnabled": {
          "description": "Makes the data discovered during the crawl available to a Web Map Service (WMS)",
          "type": "boolean",
          "default": true
        },
        "wmtsEnabled": {
          "description": "Makes the data discovered during the crawl available to a Web Map Tile Service (WMTS)",
          "type": "boolean",
          "default": false
        },
        "geoservicesEnabled": {
          "description": "Makes data discovered during the crawl available to GeoServices",
          "type": "boolean",
          "default": false
        },
        "ecwpEnabled": {
          "description": "Makes the data discovered during the crawl available to an ECWP service",
          "type": "boolean",
          "default": true
        },
        "jpipEnabled": {
          "description": "Makes the data discovered during the crawl available to a JPIP service",
          "type": "boolean",
          "default": false
        }
      }
    },
    "vectorProviderHashmapDefinition": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "description": "Optional. A service Title (or label) in the <Service> section of the capabilities document"
        },
        "abstract": {
          "type": "string",
          "description": "Optional. Defines the service abstract (or description) in the generated service metadata (capabilities) document"
        },
        "keywords": {
          "type": "string",
          "description": "Optional. A comma-separated list of keywords that will appear in the service metadata (capabilities) document"
        },
        "indexData": {
          "type": "boolean",
          "default": true,
          "description": "Creates RTree files beside the shapefiles for optimized access"
        },
        "registerServiceInCatalog": {
          "type": "boolean",
          "default": true,
          "description": "Optional. Registers the service provider in Apollo catalog so that it appears in searches of the catalog"
        },
        "enableWFS": {
          "type": "boolean",
          "description": "Enable/disable the WFS interface. The default value is true to enable",
          "default": true
        },
        "enableWMS": {
          "type": "boolean",
          "description": "Enable/disable the WMS interface. The default value is true to enable",
          "default": true
        },
        "copyright": {
          "type": "string",
          "description": "Optional. Defines text to appear in the upper left corner of each image generated by a GetMap request, and in the GML document produced by a GetFeature request"
        },
        "contactInfo": {
          "$ref": "#/definitions/contactInfoDefinition"
        },
        "metadataURL": {
          "type": "string",
          "description": "Optional. The URL template to metadata files that will appear in MetadataURL tags in the capabilities document. If not set, no MetadataURL will appear"
        },
        "allowStandardSRS": {
          "type": "string",
          "default": "true",
          "description": "Enables standard SRSes (currently EPGS:4326) to be included in the capabilities document. The default value is true"
        },
        "publishedSRS": {
          "type": "string",
          "description": "The list of srs to appear in the service metadata (capabilities) in addition to the srs parameter value"
        },
        "srsStrictBehavior": {
          "type": "string",
          "default": "false",
          "description": "Allows only requests made in a SRS published in the capabilities even if it is able to do more. The default value is false"
        },
        "legendURL": {
          "type": "string",
          "description": "Optional. The URL template to legend icons that will appear in LegendURL tags in the WMS service metadata (capabilities) document. A blank value uses the value of the <LEGEND> tag in the <CONFIGURATION> section"
        },
        "quality": {
          "type": "string",
          "description": "Sets the quality of the PNG or JPEG image output by a WMS GetMap request"
        },
        "serviceMetadataURL": {
          "type": "string",
          "description": "(Mandatory) Starting with OGC Web Services specifications versions WMS 1.3, WFS 1.1, WCS 1.1 and WTS 1.0 based on the OWS Common one, we use a single template for the ServiceIdentification and ServiceProvider sections of the service metadata (capabilities). This template is a flat file referenced by this parameter"
        },
        "serviceMetadata": {
          "$ref": "#/definitions/serviceMetadataDefinition"
        },
        "otherMetadataURL": {
          "type": "string",
          "description": "An URL (relative or not) to a file containing the ows extended capabilities of the operations metadata. The XML root should be ExtendedCapabilities elements and be a correct XML file"
        }
      }
    },
    "contactInfoDefinition": {
      "type": "object",
      "description": "Holds a set of <PARAM> elements, which describe the contact information that will appear in the <Service> tag of the capabilities in the ContactInformation or ResponsibleParty sub-section",
      "properties": {
        "AddressBody": {
          "type": "string",
          "description": "Organization address"
        },
        "AddressType": {
          "type": "string",
          "description": "Organization address type"
        },
        "City": {
          "type": "string",
          "description": "City part of the organization address"
        },
        "State": {
          "type": "string",
          "description": "Administrative state part of the oranization address"
        },
        "Country": {
          "type": "string",
          "description": "Country part of the organization address"
        },
        "PostCode": {
          "type": "string",
          "description": "PostCode of the city part of the organization address"
        },
        "Email": {
          "type": "string",
          "description": "Electronic address"
        },
        "Fax": {
          "type": "string",
          "description": "Fax number"
        },
        "Organization": {
          "type": "string",
          "description": "Organization name"
        },
        "Person": {
          "type": "string",
          "description": "Name of person"
        },
        "Position": {
          "type": "string",
          "description": "Position inside the organization"
        },
        "OnlineResource": {
          "type": "string",
          "description": "The internet address of the organization web site"
        },
        "Voice": {
          "type": "string",
          "description": "Telephone number"
        }
      }
    },
    "serviceMetadataDefinition": {
      "type": "object",
      "description": "Holds a set of <PARAM> elements, which correspond to the content of the ServiceIdentification and ServiceProvider sections of the service metadata (capabilities document)",
      "properties": {
        "Abstract": {
          "type": "string",
          "description": "Service abstract"
        },
        "AdministrativeArea": {
          "type": "string",
          "description": "Administrative state part of the organization address"
        },
        "City": {
          "type": "string",
          "description": "City part of the organization address"
        },
        "Code": {
          "type": "string",
          "description": "Service code (Leave blank in most cases)"
        },
        "CodeSpace": {
          "type": "string",
          "description": "Service code space"
        },
        "Constraints": {
          "type": "string",
          "description": "Service access constraints"
        },
        "ContactHours": {
          "type": "string",
          "description": "The hours of service of the contact point"
        },
        "ContactInstructions": {
          "type": "string",
          "description": "The instructions on how to reach contact point"
        },
        "ContactURL": {
          "type": "string",
          "description": "The URL of the contact point"
        },
        "Country": {
          "type": "string",
          "description": "Country part of the organization address"
        },
        "Emails": {
          "type": "string",
          "description": "Electronic mail addresses"
        },
        "Faxes": {
          "type": "string",
          "description": "Fax numbers"
        },
        "Fees": {
          "type": "string",
          "description": "Service fees"
        },
        "Keyword1": {
          "type": "string",
          "description": "A list of keywords"
        },
        "KeywordCode1": {
          "type": "string",
          "description": "Keywords code"
        },
        "KeywordCodeSpace1": {
          "type": "string",
          "description": "Keywords code space"
        },
        "Organization": {
          "type": "string",
          "description": "Organization name"
        },
        "PostCode": {
          "type": "string",
          "description": "PostCode of the city part of the organization address"
        },
        "ResponsibleName": {
          "type": "string",
          "description": "Name of the responsible person"
        },
        "ResponsiblePosition": {
          "type": "string",
          "description": "Position of the responsible person"
        },
        "ResponsibleRole": {
          "type": "string",
          "description": "Role of the responsible person"
        },
        "ResponsibleRoleSpace": {
          "type": "string",
          "description": "Code space of the role of the responsible person"
        },
        "Site": {
          "type": "string",
          "description": "Internet address of the organization web site"
        },
        "Title": {
          "type": "string",
          "description": "Service title"
        },
        "Version": {
          "type": "string",
          "description": "Supported versions (Leave blank in most cases)"
        },
        "Voices": {
          "type": "string",
          "description": "Telephone numbers"
        }
      }
    },
    "czsGlobalDefinition": {
      "type": "object",
      "description": "Global settings applied to all requests unless overridden by custom settings",
      "required": [
        "clipMethod",
        "outputSrs"
      ],
      "properties": {
        "clipMethod": {
          "type": "string",
          "description": "Global clipping method for the provisioning job",
          "enum": [
            "entire",
            "custom"
          ],
          "default": "entire"
        },
        "extent": {
          "type": "object",
          "description": "Global clipping extent for the provisioning job"
        },
        "outputSrs": {
          "type": "string",
          "description": "Global Spatial Reference System for the output of the provisioning job",
          "enum": [
            "original",
            "EPSG:3857",
            "EPSG:4326"
          ],
          "default": "original"
        }
      }
    },
    "czsRequestDefinition": {
      "type": "object",
      "description": "Properties specific request and override of global settings",
      "required": [
        "catalogItemName",
        "requestType"
      ],
      "properties": {
        "catalogItemName": {
          "type": "string",
          "description": "Catalog item name"
        },
        "requestType": {
          "type": "string",
          "description": "Type of clip request",
          "enum": [
            "FILE",
            "LAS",
            "RASTER"
          ],
          "default": "FILE"
        },
        "outputSrs": {
          "description": "The output spatial reference system. Original=use current epsg code of image. Global=use global epsg code settings.",
          "type": "string",
          "enum": [
            "original",
            "global",
            "EPSG:3857",
            "EPSG:4326"
          ],
          "default": "original"
        },
        "extent": {
          "description": "Geometry object",
          "type": "object"
        },
        "clipMethod": {
          "type": "string",
          "description": "The extent settings for clipping the image. Entire=use entire image extents. Global=user global extent settings. Custom=use extent property settings in this request",
          "enum": [
            "entire",
            "global",
            "custom"
          ],
          "default": "entire"
        },
        "las": {
          "$ref": "#/definitions/czsLasDefinition"
        },
        "raster": {
          "$ref": "#/definitions/czsRasterDefinition"
        }
      }
    },
    "czsLasDefinition": {
      "type": "object",
      "description": "Properties specific to clipping LAS data.",
      "required": [
        "outputFormat",
        "keepClassifications",
        "dropClassifications",
        "keepReturnsList",
        "dropReturnsList"
      ],
      "properties": {
        "outputFormat": {
          "type": "string",
          "description": "The output format of las data.",
          "enum": [
            "LAS",
            "IMG",
            "GeoTIFF"
          ],
          "default": "LAS"
        },
        "complexExtent": {
          "description": "Complex geometry object",
          "type": "object"
        },
        "keepClassifications": {
          "type": "array",
          "items": {
            "type": "number"
          }
        },
        "dropClassifications": {
          "type": "array",
          "items": {
            "type": "number"
          }
        },
        "keepReturnsList": {
          "type": "array",
          "items": {
            "type": "number"
          }
        },
        "dropReturnsList": {
          "type": "array",
          "items": {
            "type": "number"
          }
        }
      }
    },
    "czsRasterDefinition": {
      "type": "object",
      "description": "Properties specific to clipping raster data",
      "required": [
        "interpolation",
        "measurementType",
        "measurementXValue",
        "measurementYValue"
      ],
      "properties": {
        "outputFormat": {
          "type": "string",
          "description": "The output format of raster data.",
          "enum": [
            "GeoTIFF",
            "IMG",
            "NITF",
            "ECW",
            "JP2/JPEG2000"
          ],
          "default": "IMG"
        },
        "interpolation": {
          "type": "string",
          "description": "",
          "enum": [
            "bilinear",
            "bicubic",
            "nearest neighbor"
          ],
          "default": "bilinear"
        },
        "channelAxis": {
          "type": "string",
          "description": ""
        },
        "channels": {
          "type": "array",
          "description": "",
          "items": {
            "type": "string"
          }
        },
        "measurementType": {
          "type": "string",
          "enum": [
            "pixel",
            "resolution"
          ],
          "default": "pixel"
        },
        "measurementXValue": {
          "type": "number",
          "description": "Set x value based on measurementType"
        },
        "measurementYValue": {
          "type": "number",
          "description": "Set y value based on measurementType"
        }
      }
    }
  },
  "parameters": {
    "catalogLockPostPayloadParam": {
      "in": "body",
      "name": "catalogLockPostPayload",
      "description": "Payload for specifying a set of items to be locked.",
      "required": false,
      "schema": {
        "$ref": "#/definitions/LockSpecification"
      }
    },
    "catalogUnlockPostPayloadParam": {
      "in": "body",
      "name": "catalogUnlockPostPayload",
      "description": "Payload for specifying a lock set to unlock.",
      "required": false,
      "schema": {
        "$ref": "#/definitions/LockSetIdentification"
      }
    },
    "catalogItemIdPostPayloadParam": {
      "in": "body",
      "name": "catalogItemIdPostPayload",
      "description": "Payload for specifying a single catalog id.",
      "required": false,
      "schema": {
        "$ref": "#/definitions/CatalogId"
      }
    },
    "catalogItemIdsPostPayloadParam": {
      "in": "body",
      "name": "catalogItemIdsPostPayload",
      "description": "Payload for specifying multiple catalog ids.",
      "required": false,
      "schema": {
        "$ref": "#/definitions/CatalogIds"
      }
    },
    "profileParamFull": {
      "name": "profile",
      "in": "query",
      "description": "Profile determines the amount of detail that is returned with each catalog item.",
      "required": false,
      "type": "string",
      "default": "full",
      "enum": [
        "full",
        "summary",
        "brief"
      ]
    },
    "profileParamBrief": {
      "name": "profile",
      "in": "query",
      "description": "Profile determines the amount of detail that is returned with each catalog item.",
      "required": false,
      "type": "string",
      "default": "brief",
      "enum": [
        "full",
        "summary",
        "brief"
      ]
    },
    "keywordsParam": {
      "name": "keywords",
      "in": "query",
      "description": "Space separated set of keywords. This allows filtering of catalog items by specific keywords.",
      "required": false,
      "type": "array",
      "items": {
        "type": "string"
      },
      "collectionFormat": "ssv",
      "allowEmptyValue": true
    },
    "orderbyParam": {
      "name": "orderby",
      "in": "query",
      "description": "Return the catalog items ordered according to the given catalog property name. The property must be a valid property for the type of catalog item being queried. Use ```asc``` for ascending and ```desc``` for descending.",
      "required": false,
      "type": "string"
    },
    "startParam": {
      "name": "start",
      "in": "query",
      "description": "Filter the results starting at this index between 0 and the total number of catalog items.",
      "required": false,
      "type": "integer",
      "default": 0,
      "minimum": 0
    },
    "maxresultsParam": {
      "name": "maxresults",
      "in": "query",
      "description": "The maximum number of catalog items to return.",
      "required": false,
      "type": "integer",
      "default": 10,
      "minimum": 1
    },
    "classesParam": {
      "name": "classes",
      "in": "query",
      "description": "Comma delimited set of entity class names.  Possible values include:\n- ```com.erdas.rsp.babel.model.ResourceAggregate```\n- ```com.erdas.rsp.babel.model.imagery.ImageReference```\n- ```com.erdas.rsp.babel.model.vector.VectorReference```\n-  ```com.erdas.rsp.babel.model.pointcloud.PointCloudResource```\n- ```com.erdas.rsp.babel.model.GenericItem```\n- ```com.erdas.rsp.babel.model.video.VideoResource```\n",
      "required": false,
      "type": "array",
      "items": {
        "type": "string",
        "enum": [
          "com.erdas.rsp.babel.model.ResourceAggregate",
          "com.erdas.rsp.babel.model.imagery.ImageReference",
          "com.erdas.rsp.babel.model.vector.VectorReference",
          "com.erdas.rsp.babel.model.pointcloud.PointCloudResource",
          "com.erdas.rsp.babel.model.GenericItem",
          "com.erdas.rsp.babel.model.video.VideoResource"
        ]
      },
      "collectionFormat": "multi"
    },
    "serviceClassesParam": {
      "name": "classes",
      "in": "query",
      "description": "Comma delimited set of entity class names.  Possible values include:\n- ```com.erdas.rsp.babel.model.ows.WebFeatureService```\n- ```com.erdas.rsp.babel.model.ows.WebMapService```\n- ```com.erdas.rsp.babel.model.ows.WebCoverageService```\n-  ```com.erdas.rsp.babel.model.ows.WebProcessingService```\n",
      "required": false,
      "type": "array",
      "items": {
        "type": "string",
        "enum": [
          "com.erdas.rsp.babel.model.ows.WebFeatureService",
          "com.erdas.rsp.babel.model.ows.WebMapService",
          "com.erdas.rsp.babel.model.ows.WebCoverageService",
          "com.erdas.rsp.babel.model.ows.WebProcessingService"
        ]
      },
      "collectionFormat": "multi"
    },
    "intersectParam": {
      "name": "intersect",
      "in": "query",
      "description": "Spatially filtering using a spatial intersection with a WKT-encoded geometry.  Only valid for catalog item classes with a footprint.",
      "required": false,
      "type": "string"
    },
    "deleteLocalFilesParam": {
      "name": "deleteLocalFiles",
      "in": "query",
      "description": "Determines whether local files on server are deleted when provider is deleted.",
      "required": false,
      "type": "boolean",
      "default": "true"
    },
    "idParam": {
      "name": "ID",
      "in": "path",
      "description": "ID of the catalog item.",
      "required": true,
      "type": "string"
    },
    "providerNameParam": {
      "name": "providerName",
      "in": "path",
      "description": "Unique legacy service name.",
      "required": true,
      "type": "string"
    },
    "attachmentNameParam": {
      "name": "attachmentName",
      "in": "path",
      "description": "Name of the catalog item attachment.",
      "required": true,
      "type": "string"
    },
    "propertyNameParam": {
      "name": "propertyName",
      "in": "path",
      "description": "Name of the catalog item property.",
      "required": true,
      "type": "string"
    },
    "principalNameParam": {
      "name": "principalName",
      "in": "path",
      "description": "Principal name for a catalog item.",
      "required": true,
      "type": "string"
    },
    "propertyPostPayloadParam": {
      "in": "body",
      "name": "propertyPostPayload",
      "description": "Payload for creating or modifying a catalog item property.",
      "required": false,
      "schema": {
        "$ref": "#/definitions/CatalogProperty"
      }
    },
    "vectorProviderHashmapPatchPayloadParam": {
      "name": "Map",
      "in": "body",
      "required": true,
      "description": "Update legacy vector service properties",
      "schema": {
        "$ref": "#/definitions/vectorProviderHashmapDefinition"
      }
    },
    "catalogAttributePatchPayloadParam": {
      "in": "body",
      "name": "catalogAttributePatchPay",
      "description": "Payload for modifying a catalog item property.",
      "required": false,
      "schema": {
        "$ref": "#/definitions/CatalogAttribute"
      }
    },
    "rightsPutPayloadParam": {
      "in": "body",
      "name": "rightsPostPayload",
      "description": "Payload for updating principal's rights for a catalog  item property.",
      "required": false,
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Rights"
        }
      }
    },
    "advancedSearchCriteriaPostPayloadParam": {
      "in": "body",
      "name": "advancedSearchCriteriaPostPayload",
      "required": false,
      "schema": {
        "$ref": "#/definitions/AdvancedSearchCriteria"
      }
    },
    "propertyPostTypeQueryParam": {
      "name": "type",
      "in": "query",
      "description": "Type code for catalog item property.\nType code defined as follows:\n- ```'1' = string ```\n- ```'2' = 32 bit integer ```\n- ```'3' = double ```\n- ```'4' = 64-bit integer ```\n- ```'5' = float ```\n- ```'6' = date (ISO-8601 format) ```",
      "required": false,
      "type": "string"
    },
    "propertyPostValueQueryParam": {
      "name": "value",
      "in": "query",
      "description": "Value for the catalog item property. Must be url encoded.",
      "required": false,
      "type": "string"
    },
    "propertyPostRenameQueryParam": {
      "name": "rename",
      "in": "query",
      "description": "Rename query string parameter for catalog item properties.",
      "required": false,
      "type": "string"
    },
    "attachmentPostPayload": {
      "name": "addAttachment",
      "in": "body",
      "description": "Add a attachment that contains reference to file location and its mimeType",
      "required": true,
      "schema": {
        "$ref": "#/definitions/AttachmentParams"
      }
    },
    "catalogItemPostPayload": {
      "name": "addCatalogItem",
      "in": "body",
      "required": true,
      "schema": {
        "$ref": "#/definitions/BaseCatalogItemParams"
      }
    }
  }
}